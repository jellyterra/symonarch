// Copyright (C) 2024 Symonarch
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https:www.gnu.org/licenses/>.

import spinal.core._

/* Automatically generated by parse_opcodes */
object Instructions {
  val IType = Map(
    "ADD" -> M"b0000000??????????000?????0110011",
    "ADDI" -> M"b?????????????????000?????0010011",
    "AND" -> M"b0000000??????????111?????0110011",
    "ANDI" -> M"b?????????????????111?????0010011",
    "AUIPC" -> M"b?????????????????????????0010111",
    "BEQ" -> M"b?????????????????000?????1100011",
    "BGE" -> M"b?????????????????101?????1100011",
    "BGEU" -> M"b?????????????????111?????1100011",
    "BLT" -> M"b?????????????????100?????1100011",
    "BLTU" -> M"b?????????????????110?????1100011",
    "BNE" -> M"b?????????????????001?????1100011",
    "EBREAK" -> M"b00000000000100000000000001110011",
    "ECALL" -> M"b00000000000000000000000001110011",
    "FENCE" -> M"b?????????????????000?????0001111",
    "FENCE_TSO" -> M"b100000110011?????000?????0001111",
    "JAL" -> M"b?????????????????????????1101111",
    "JALR" -> M"b?????????????????000?????1100111",
    "LB" -> M"b?????????????????000?????0000011",
    "LBU" -> M"b?????????????????100?????0000011",
    "LH" -> M"b?????????????????001?????0000011",
    "LHU" -> M"b?????????????????101?????0000011",
    "LUI" -> M"b?????????????????????????0110111",
    "LW" -> M"b?????????????????010?????0000011",
    "OR" -> M"b0000000??????????110?????0110011",
    "ORI" -> M"b?????????????????110?????0010011",
    "PAUSE" -> M"b00000001000000000000000000001111",
    "SB" -> M"b?????????????????000?????0100011",
    "SBREAK" -> M"b00000000000100000000000001110011",
    "SCALL" -> M"b00000000000000000000000001110011",
    "SH" -> M"b?????????????????001?????0100011",
    "SLL" -> M"b0000000??????????001?????0110011",
    "SLT" -> M"b0000000??????????010?????0110011",
    "SLTI" -> M"b?????????????????010?????0010011",
    "SLTIU" -> M"b?????????????????011?????0010011",
    "SLTU" -> M"b0000000??????????011?????0110011",
    "SRA" -> M"b0100000??????????101?????0110011",
    "SRL" -> M"b0000000??????????101?????0110011",
    "SUB" -> M"b0100000??????????000?????0110011",
    "SW" -> M"b?????????????????010?????0100011",
    "XOR" -> M"b0000000??????????100?????0110011",
    "XORI" -> M"b?????????????????100?????0010011",
  )
  val ZPNType = Map(
    "ADD16" -> M"b0100000??????????000?????1110111",
    "ADD8" -> M"b0100100??????????000?????1110111",
    "AVE" -> M"b1110000??????????000?????1110111",
    "CLROV" -> M"b00000000100100001111?????1110011",
    "CLRS16" -> M"b101011101000?????000?????1110111",
    "CLRS32" -> M"b101011111000?????000?????1110111",
    "CLRS8" -> M"b101011100000?????000?????1110111",
    "CLZ16" -> M"b101011101001?????000?????1110111",
    "CLZ32" -> M"b101011111001?????000?????1110111",
    "CLZ8" -> M"b101011100001?????000?????1110111",
    "CMPEQ16" -> M"b0100110??????????000?????1110111",
    "CMPEQ8" -> M"b0100111??????????000?????1110111",
    "CRAS16" -> M"b0100010??????????000?????1110111",
    "CRSA16" -> M"b0100011??????????000?????1110111",
    "KABS16" -> M"b101011010001?????000?????1110111",
    "KABS8" -> M"b101011010000?????000?????1110111",
    "KABSW" -> M"b101011010100?????000?????1110111",
    "KADD16" -> M"b0001000??????????000?????1110111",
    "KADD8" -> M"b0001100??????????000?????1110111",
    "KADDH" -> M"b0000010??????????001?????1110111",
    "KADDW" -> M"b0000000??????????001?????1110111",
    "KCRAS16" -> M"b0001010??????????000?????1110111",
    "KCRSA16" -> M"b0001011??????????000?????1110111",
    "KDMABB" -> M"b1101001??????????001?????1110111",
    "KDMABT" -> M"b1110001??????????001?????1110111",
    "KDMATT" -> M"b1111001??????????001?????1110111",
    "KDMBB" -> M"b0000101??????????001?????1110111",
    "KDMBT" -> M"b0001101??????????001?????1110111",
    "KDMTT" -> M"b0010101??????????001?????1110111",
    "KHM16" -> M"b1000011??????????000?????1110111",
    "KHM8" -> M"b1000111??????????000?????1110111",
    "KHMBB" -> M"b0000110??????????001?????1110111",
    "KHMBT" -> M"b0001110??????????001?????1110111",
    "KHMTT" -> M"b0010110??????????001?????1110111",
    "KHMX16" -> M"b1001011??????????000?????1110111",
    "KHMX8" -> M"b1001111??????????000?????1110111",
    "KMABB" -> M"b0101101??????????001?????1110111",
    "KMABT" -> M"b0110101??????????001?????1110111",
    "KMADA" -> M"b0100100??????????001?????1110111",
    "KMADRS" -> M"b0110110??????????001?????1110111",
    "KMADS" -> M"b0101110??????????001?????1110111",
    "KMATT" -> M"b0111101??????????001?????1110111",
    "KMAXDA" -> M"b0100101??????????001?????1110111",
    "KMAXDS" -> M"b0111110??????????001?????1110111",
    "KMDA" -> M"b0011100??????????001?????1110111",
    "KMMAC" -> M"b0110000??????????001?????1110111",
    "KMMAC_U" -> M"b0111000??????????001?????1110111",
    "KMMAWB" -> M"b0100011??????????001?????1110111",
    "KMMAWB2" -> M"b1100111??????????001?????1110111",
    "KMMAWB2_U" -> M"b1101111??????????001?????1110111",
    "KMMAWB_U" -> M"b0101011??????????001?????1110111",
    "KMMAWT" -> M"b0110011??????????001?????1110111",
    "KMMAWT2" -> M"b1110111??????????001?????1110111",
    "KMMAWT2_U" -> M"b1111111??????????001?????1110111",
    "KMMAWT_U" -> M"b0111011??????????001?????1110111",
    "KMMSB" -> M"b0100001??????????001?????1110111",
    "KMMSB_U" -> M"b0101001??????????001?????1110111",
    "KMMWB2" -> M"b1000111??????????001?????1110111",
    "KMMWB2_U" -> M"b1001111??????????001?????1110111",
    "KMMWT2" -> M"b1010111??????????001?????1110111",
    "KMMWT2_U" -> M"b1011111??????????001?????1110111",
    "KMSDA" -> M"b0100110??????????001?????1110111",
    "KMSXDA" -> M"b0100111??????????001?????1110111",
    "KMXDA" -> M"b0011101??????????001?????1110111",
    "KSLL16" -> M"b0110010??????????000?????1110111",
    "KSLL8" -> M"b0110110??????????000?????1110111",
    "KSLLI16" -> M"b01110101?????????000?????1110111",
    "KSLLI8" -> M"b011111001????????000?????1110111",
    "KSLLIW" -> M"b0011011??????????001?????1110111",
    "KSLLW" -> M"b0010011??????????001?????1110111",
    "KSLRA16" -> M"b0101011??????????000?????1110111",
    "KSLRA16_U" -> M"b0110011??????????000?????1110111",
    "KSLRA8" -> M"b0101111??????????000?????1110111",
    "KSLRA8_U" -> M"b0110111??????????000?????1110111",
    "KSLRAW" -> M"b0110111??????????001?????1110111",
    "KSLRAW_U" -> M"b0111111??????????001?????1110111",
    "KSTAS16" -> M"b1100010??????????010?????1110111",
    "KSTSA16" -> M"b1100011??????????010?????1110111",
    "KSUB16" -> M"b0001001??????????000?????1110111",
    "KSUB8" -> M"b0001101??????????000?????1110111",
    "KSUBH" -> M"b0000011??????????001?????1110111",
    "KSUBW" -> M"b0000001??????????001?????1110111",
    "KWMMUL" -> M"b0110001??????????001?????1110111",
    "KWMMUL_U" -> M"b0111001??????????001?????1110111",
    "MADDR32" -> M"b1100010??????????001?????1110111",
    "MSUBR32" -> M"b1100011??????????001?????1110111",
    "PBSAD" -> M"b1111110??????????000?????1110111",
    "PBSADA" -> M"b1111111??????????000?????1110111",
    "PKBT16" -> M"b0001111??????????001?????1110111",
    "PKTB16" -> M"b0011111??????????001?????1110111",
    "RADD16" -> M"b0000000??????????000?????1110111",
    "RADD8" -> M"b0000100??????????000?????1110111",
    "RADDW" -> M"b0010000??????????001?????1110111",
    "RCRAS16" -> M"b0000010??????????000?????1110111",
    "RCRSA16" -> M"b0000011??????????000?????1110111",
    "RDOV" -> M"b00000000100100000010?????1110011",
    "RSTAS16" -> M"b1011010??????????010?????1110111",
    "RSTSA16" -> M"b1011011??????????010?????1110111",
    "RSUB16" -> M"b0000001??????????000?????1110111",
    "RSUB8" -> M"b0000101??????????000?????1110111",
    "RSUBW" -> M"b0010001??????????001?????1110111",
    "SCLIP16" -> M"b10000100?????????000?????1110111",
    "SCLIP32" -> M"b1110010??????????000?????1110111",
    "SCLIP8" -> M"b100011000????????000?????1110111",
    "SCMPLE16" -> M"b0001110??????????000?????1110111",
    "SCMPLE8" -> M"b0001111??????????000?????1110111",
    "SCMPLT16" -> M"b0000110??????????000?????1110111",
    "SCMPLT8" -> M"b0000111??????????000?????1110111",
    "SLL16" -> M"b0101010??????????000?????1110111",
    "SLL8" -> M"b0101110??????????000?????1110111",
    "SLLI16" -> M"b01110100?????????000?????1110111",
    "SLLI8" -> M"b011111000????????000?????1110111",
    "SMAQA" -> M"b1100100??????????000?????1110111",
    "SMAQA_SU" -> M"b1100101??????????000?????1110111",
    "SMAX16" -> M"b1000001??????????000?????1110111",
    "SMAX8" -> M"b1000101??????????000?????1110111",
    "SMBB16" -> M"b0000100??????????001?????1110111",
    "SMBT16" -> M"b0001100??????????001?????1110111",
    "SMDRS" -> M"b0110100??????????001?????1110111",
    "SMDS" -> M"b0101100??????????001?????1110111",
    "SMIN16" -> M"b1000000??????????000?????1110111",
    "SMIN8" -> M"b1000100??????????000?????1110111",
    "SMMUL_U" -> M"b0101000??????????001?????1110111",
    "SMMWB" -> M"b0100010??????????001?????1110111",
    "SMMWB_U" -> M"b0101010??????????001?????1110111",
    "SMMWT" -> M"b0110010??????????001?????1110111",
    "SMMWT_U" -> M"b0111010??????????001?????1110111",
    "SMTT16" -> M"b0010100??????????001?????1110111",
    "SMXDS" -> M"b0111100??????????001?????1110111",
    "SRA16" -> M"b0101000??????????000?????1110111",
    "SRA16_U" -> M"b0110000??????????000?????1110111",
    "SRA8" -> M"b0101100??????????000?????1110111",
    "SRA8_U" -> M"b0110100??????????000?????1110111",
    "SRA_U" -> M"b0010010??????????001?????1110111",
    "SRAI16" -> M"b01110000?????????000?????1110111",
    "SRAI16_U" -> M"b01110001?????????000?????1110111",
    "SRAI8" -> M"b011110000????????000?????1110111",
    "SRAI8_U" -> M"b011110001????????000?????1110111",
    "SRL16" -> M"b0101001??????????000?????1110111",
    "SRL16_U" -> M"b0110001??????????000?????1110111",
    "SRL8" -> M"b0101101??????????000?????1110111",
    "SRL8_U" -> M"b0110101??????????000?????1110111",
    "SRLI16" -> M"b01110010?????????000?????1110111",
    "SRLI16_U" -> M"b01110011?????????000?????1110111",
    "SRLI8" -> M"b011110100????????000?????1110111",
    "SRLI8_U" -> M"b011110101????????000?????1110111",
    "STAS16" -> M"b1111010??????????010?????1110111",
    "STSA16" -> M"b1111011??????????010?????1110111",
    "SUB16" -> M"b0100001??????????000?????1110111",
    "SUB8" -> M"b0100101??????????000?????1110111",
    "SUNPKD810" -> M"b101011001000?????000?????1110111",
    "SUNPKD820" -> M"b101011001001?????000?????1110111",
    "SUNPKD830" -> M"b101011001010?????000?????1110111",
    "SUNPKD831" -> M"b101011001011?????000?????1110111",
    "SUNPKD832" -> M"b101011010011?????000?????1110111",
    "UCLIP16" -> M"b10000101?????????000?????1110111",
    "UCLIP32" -> M"b1111010??????????000?????1110111",
    "UCLIP8" -> M"b100011010????????000?????1110111",
    "UCMPLE16" -> M"b0011110??????????000?????1110111",
    "UCMPLE8" -> M"b0011111??????????000?????1110111",
    "UCMPLT16" -> M"b0010110??????????000?????1110111",
    "UCMPLT8" -> M"b0010111??????????000?????1110111",
    "UKADD16" -> M"b0011000??????????000?????1110111",
    "UKADD8" -> M"b0011100??????????000?????1110111",
    "UKADDH" -> M"b0001010??????????001?????1110111",
    "UKADDW" -> M"b0001000??????????001?????1110111",
    "UKCRAS16" -> M"b0011010??????????000?????1110111",
    "UKCRSA16" -> M"b0011011??????????000?????1110111",
    "UKSTAS16" -> M"b1110010??????????010?????1110111",
    "UKSTSA16" -> M"b1110011??????????010?????1110111",
    "UKSUB16" -> M"b0011001??????????000?????1110111",
    "UKSUB8" -> M"b0011101??????????000?????1110111",
    "UKSUBH" -> M"b0001011??????????001?????1110111",
    "UKSUBW" -> M"b0001001??????????001?????1110111",
    "UMAQA" -> M"b1100110??????????000?????1110111",
    "UMAX16" -> M"b1001001??????????000?????1110111",
    "UMAX8" -> M"b1001101??????????000?????1110111",
    "UMIN16" -> M"b1001000??????????000?????1110111",
    "UMIN8" -> M"b1001100??????????000?????1110111",
    "URADD16" -> M"b0010000??????????000?????1110111",
    "URADD8" -> M"b0010100??????????000?????1110111",
    "URADDW" -> M"b0011000??????????001?????1110111",
    "URCRAS16" -> M"b0010010??????????000?????1110111",
    "URCRSA16" -> M"b0010011??????????000?????1110111",
    "URSTAS16" -> M"b1101010??????????010?????1110111",
    "URSTSA16" -> M"b1101011??????????010?????1110111",
    "URSUB16" -> M"b0010001??????????000?????1110111",
    "URSUB8" -> M"b0010101??????????000?????1110111",
    "URSUBW" -> M"b0011001??????????001?????1110111",
    "ZUNPKD810" -> M"b101011001100?????000?????1110111",
    "ZUNPKD820" -> M"b101011001101?????000?????1110111",
    "ZUNPKD830" -> M"b101011001110?????000?????1110111",
    "ZUNPKD831" -> M"b101011001111?????000?????1110111",
    "ZUNPKD832" -> M"b101011010111?????000?????1110111",
  )
  val ZPN64Type = Map(
    "ADD32" -> M"b0100000??????????010?????1110111",
    "CRAS32" -> M"b0100010??????????010?????1110111",
    "CRSA32" -> M"b0100011??????????010?????1110111",
    "INSB" -> M"b101011000????????000?????1110111",
    "KABS32" -> M"b101011010010?????000?????1110111",
    "KADD32" -> M"b0001000??????????010?????1110111",
    "KCRAS32" -> M"b0001010??????????010?????1110111",
    "KCRSA32" -> M"b0001011??????????010?????1110111",
    "KDMABB16" -> M"b1101100??????????001?????1110111",
    "KDMABT16" -> M"b1110100??????????001?????1110111",
    "KDMATT16" -> M"b1111100??????????001?????1110111",
    "KDMBB16" -> M"b1101101??????????001?????1110111",
    "KDMBT16" -> M"b1110101??????????001?????1110111",
    "KDMTT16" -> M"b1111101??????????001?????1110111",
    "KHMBB16" -> M"b1101110??????????001?????1110111",
    "KHMBT16" -> M"b1110110??????????001?????1110111",
    "KHMTT16" -> M"b1111110??????????001?????1110111",
    "KMABB32" -> M"b0101101??????????010?????1110111",
    "KMABT32" -> M"b0110101??????????010?????1110111",
    "KMADRS32" -> M"b0110110??????????010?????1110111",
    "KMADS32" -> M"b0101110??????????010?????1110111",
    "KMATT32" -> M"b0111101??????????010?????1110111",
    "KMAXDA32" -> M"b0100101??????????010?????1110111",
    "KMAXDS32" -> M"b0111110??????????010?????1110111",
    "KMDA32" -> M"b0011100??????????010?????1110111",
    "KMSDA32" -> M"b0100110??????????010?????1110111",
    "KMSXDA32" -> M"b0100111??????????010?????1110111",
    "KMXDA32" -> M"b0011101??????????010?????1110111",
    "KSLL32" -> M"b0110010??????????010?????1110111",
    "KSLLI32" -> M"b1000010??????????010?????1110111",
    "KSLRA32" -> M"b0101011??????????010?????1110111",
    "KSLRA32_U" -> M"b0110011??????????010?????1110111",
    "KSTAS32" -> M"b1100000??????????010?????1110111",
    "KSTSA32" -> M"b1100001??????????010?????1110111",
    "KSUB32" -> M"b0001001??????????010?????1110111",
    "PKBB16" -> M"b0000111??????????001?????1110111",
    "PKBT32" -> M"b0001111??????????010?????1110111",
    "PKTB32" -> M"b0011111??????????010?????1110111",
    "PKTT16" -> M"b0010111??????????001?????1110111",
    "RADD32" -> M"b0000000??????????010?????1110111",
    "RCRAS32" -> M"b0000010??????????010?????1110111",
    "RCRSA32" -> M"b0000011??????????010?????1110111",
    "RSTAS32" -> M"b1011000??????????010?????1110111",
    "RSTSA32" -> M"b1011001??????????010?????1110111",
    "RSUB32" -> M"b0000001??????????010?????1110111",
    "SLL32" -> M"b0101010??????????010?????1110111",
    "SLLI32" -> M"b0111010??????????010?????1110111",
    "SMAX32" -> M"b1001001??????????010?????1110111",
    "SMBT32" -> M"b0001100??????????010?????1110111",
    "SMDRS32" -> M"b0110100??????????010?????1110111",
    "SMDS32" -> M"b0101100??????????010?????1110111",
    "SMIN32" -> M"b1001000??????????010?????1110111",
    "SMMUL" -> M"b0100000??????????001?????1110111",
    "SMTT32" -> M"b0010100??????????010?????1110111",
    "SMXDS32" -> M"b0111100??????????010?????1110111",
    "SRA32" -> M"b0101000??????????010?????1110111",
    "SRA32_U" -> M"b0110000??????????010?????1110111",
    "SRAI32" -> M"b0111000??????????010?????1110111",
    "SRAI32_U" -> M"b1000000??????????010?????1110111",
    "SRAI_U" -> M"b110101???????????001?????1110111",
    "SRAIW_U" -> M"b0011010??????????001?????1110111",
    "SRL32" -> M"b0101001??????????010?????1110111",
    "SRL32_U" -> M"b0110001??????????010?????1110111",
    "SRLI32" -> M"b0111001??????????010?????1110111",
    "SRLI32_U" -> M"b1000001??????????010?????1110111",
    "STAS32" -> M"b1111000??????????010?????1110111",
    "STSA32" -> M"b1111001??????????010?????1110111",
    "SUB32" -> M"b0100001??????????010?????1110111",
    "UKADD32" -> M"b0011000??????????010?????1110111",
    "UKCRAS32" -> M"b0011010??????????010?????1110111",
    "UKCRSA32" -> M"b0011011??????????010?????1110111",
    "UKSTAS32" -> M"b1110000??????????010?????1110111",
    "UKSTSA32" -> M"b1110001??????????010?????1110111",
    "UKSUB32" -> M"b0011001??????????010?????1110111",
    "UMAX32" -> M"b1010001??????????010?????1110111",
    "UMIN32" -> M"b1010000??????????010?????1110111",
    "URADD32" -> M"b0010000??????????010?????1110111",
    "URCRAS32" -> M"b0010010??????????010?????1110111",
    "URCRSA32" -> M"b0010011??????????010?????1110111",
    "URSTAS32" -> M"b1101000??????????010?????1110111",
    "URSTSA32" -> M"b1101001??????????010?????1110111",
    "URSUB32" -> M"b0010001??????????010?????1110111",
  )
  val ZPSF32Type = Map(
    "ADD64" -> M"b1100000??????????001?????1110111",
    "SUB64" -> M"b1100001??????????001?????1110111",
  )
  val ZBA64Type = Map(
    "ADD_UW" -> M"b0000100??????????000?????0111011",
    "SH1ADD_UW" -> M"b0010000??????????010?????0111011",
    "SH2ADD_UW" -> M"b0010000??????????100?????0111011",
    "SH3ADD_UW" -> M"b0010000??????????110?????0111011",
    "SLLI_UW" -> M"b000010???????????001?????0011011",
  )
  val I128Type = Map(
    "ADDD" -> M"b0000000??????????000?????1111011",
    "ADDID" -> M"b?????????????????000?????1011011",
    "LDU" -> M"b?????????????????111?????0000011",
    "LQ" -> M"b?????????????????011?????0001111",
    "SLLD" -> M"b0000000??????????001?????1111011",
    "SLLI_RV128" -> M"b00000????????????001?????0010011",
    "SLLID" -> M"b000000???????????001?????1011011",
    "SQ" -> M"b?????????????????100?????0100011",
    "SRAD" -> M"b0100000??????????101?????1111011",
    "SRAI_RV128" -> M"b01000????????????101?????0010011",
    "SRAID" -> M"b010000???????????101?????1011011",
    "SRLD" -> M"b0000000??????????101?????1111011",
    "SRLI_RV128" -> M"b00000????????????101?????0010011",
    "SRLID" -> M"b000000???????????101?????1011011",
    "SUBD" -> M"b0100000??????????000?????1111011",
  )
  val I64Type = Map(
    "ADDIW" -> M"b?????????????????000?????0011011",
    "ADDW" -> M"b0000000??????????000?????0111011",
    "LD" -> M"b?????????????????011?????0000011",
    "LWU" -> M"b?????????????????110?????0000011",
    "SD" -> M"b?????????????????011?????0100011",
    "SLLI" -> M"b000000???????????001?????0010011",
    "SLLIW" -> M"b0000000??????????001?????0011011",
    "SLLW" -> M"b0000000??????????001?????0111011",
    "SRAI" -> M"b010000???????????101?????0010011",
    "SRAIW" -> M"b0100000??????????101?????0011011",
    "SRAW" -> M"b0100000??????????101?????0111011",
    "SRLI" -> M"b000000???????????101?????0010011",
    "SRLIW" -> M"b0000000??????????101?????0011011",
    "SRLW" -> M"b0000000??????????101?????0111011",
    "SUBW" -> M"b0100000??????????000?????0111011",
  )
  val ZKND32Type = Map(
    "AES32DSI" -> M"b??10101??????????000?????0110011",
    "AES32DSMI" -> M"b??10111??????????000?????0110011",
  )
  val ZKNE32Type = Map(
    "AES32ESI" -> M"b??10001??????????000?????0110011",
    "AES32ESMI" -> M"b??10011??????????000?????0110011",
  )
  val ZKND64Type = Map(
    "AES64DS" -> M"b0011101??????????000?????0110011",
    "AES64DSM" -> M"b0011111??????????000?????0110011",
    "AES64IM" -> M"b001100000000?????001?????0010011",
    "AES64KS1I" -> M"b00110001?????????001?????0010011",
    "AES64KS2" -> M"b0111111??????????000?????0110011",
  )
  val ZKNE64Type = Map(
    "AES64ES" -> M"b0011001??????????000?????0110011",
    "AES64ESM" -> M"b0011011??????????000?????0110011",
  )
  val ZABHAType = Map(
    "AMOADD_B" -> M"b00000????????????000?????0101111",
    "AMOADD_H" -> M"b00000????????????001?????0101111",
    "AMOAND_B" -> M"b01100????????????000?????0101111",
    "AMOAND_H" -> M"b01100????????????001?????0101111",
    "AMOCAS_B" -> M"b00101????????????000?????0101111",
    "AMOCAS_H" -> M"b00101????????????001?????0101111",
    "AMOMAX_B" -> M"b10100????????????000?????0101111",
    "AMOMAX_H" -> M"b10100????????????001?????0101111",
    "AMOMAXU_B" -> M"b11100????????????000?????0101111",
    "AMOMAXU_H" -> M"b11100????????????001?????0101111",
    "AMOMIN_B" -> M"b10000????????????000?????0101111",
    "AMOMIN_H" -> M"b10000????????????001?????0101111",
    "AMOMINU_B" -> M"b11000????????????000?????0101111",
    "AMOMINU_H" -> M"b11000????????????001?????0101111",
    "AMOOR_B" -> M"b01000????????????000?????0101111",
    "AMOOR_H" -> M"b01000????????????001?????0101111",
    "AMOSWAP_B" -> M"b00001????????????000?????0101111",
    "AMOSWAP_H" -> M"b00001????????????001?????0101111",
    "AMOXOR_B" -> M"b00100????????????000?????0101111",
    "AMOXOR_H" -> M"b00100????????????001?????0101111",
  )
  val A64Type = Map(
    "AMOADD_D" -> M"b00000????????????011?????0101111",
    "AMOAND_D" -> M"b01100????????????011?????0101111",
    "AMOMAX_D" -> M"b10100????????????011?????0101111",
    "AMOMAXU_D" -> M"b11100????????????011?????0101111",
    "AMOMIN_D" -> M"b10000????????????011?????0101111",
    "AMOMINU_D" -> M"b11000????????????011?????0101111",
    "AMOOR_D" -> M"b01000????????????011?????0101111",
    "AMOSWAP_D" -> M"b00001????????????011?????0101111",
    "AMOXOR_D" -> M"b00100????????????011?????0101111",
    "LR_D" -> M"b00010??00000?????011?????0101111",
    "SC_D" -> M"b00011????????????011?????0101111",
  )
  val AType = Map(
    "AMOADD_W" -> M"b00000????????????010?????0101111",
    "AMOAND_W" -> M"b01100????????????010?????0101111",
    "AMOMAX_W" -> M"b10100????????????010?????0101111",
    "AMOMAXU_W" -> M"b11100????????????010?????0101111",
    "AMOMIN_W" -> M"b10000????????????010?????0101111",
    "AMOMINU_W" -> M"b11000????????????010?????0101111",
    "AMOOR_W" -> M"b01000????????????010?????0101111",
    "AMOSWAP_W" -> M"b00001????????????010?????0101111",
    "AMOXOR_W" -> M"b00100????????????010?????0101111",
    "LR_W" -> M"b00010??00000?????010?????0101111",
    "SC_W" -> M"b00011????????????010?????0101111",
  )
  val ZACASType = Map(
    "AMOCAS_D" -> M"b00101????????????011?????0101111",
    "AMOCAS_W" -> M"b00101????????????010?????0101111",
  )
  val ZACAS64Type = Map(
    "AMOCAS_Q" -> M"b00101????????????100?????0101111",
  )
  val ZBBType = Map(
    "ANDN" -> M"b0100000??????????111?????0110011",
    "CLZ" -> M"b011000000000?????001?????0010011",
    "CPOP" -> M"b011000000010?????001?????0010011",
    "CTZ" -> M"b011000000001?????001?????0010011",
    "MAX" -> M"b0000101??????????110?????0110011",
    "MAXU" -> M"b0000101??????????111?????0110011",
    "MIN" -> M"b0000101??????????100?????0110011",
    "MINU" -> M"b0000101??????????101?????0110011",
    "ORC_B" -> M"b001010000111?????101?????0010011",
    "ORN" -> M"b0100000??????????110?????0110011",
    "ROL" -> M"b0110000??????????001?????0110011",
    "ROR" -> M"b0110000??????????101?????0110011",
    "SEXT_B" -> M"b011000000100?????001?????0010011",
    "SEXT_H" -> M"b011000000101?????001?????0010011",
    "XNOR" -> M"b0100000??????????100?????0110011",
  )
  val ZBSType = Map(
    "BCLR" -> M"b0100100??????????001?????0110011",
    "BEXT" -> M"b0100100??????????101?????0110011",
    "BINV" -> M"b0110100??????????001?????0110011",
    "BSET" -> M"b0010100??????????001?????0110011",
  )
  val ZBS64Type = Map(
    "BCLRI" -> M"b010010???????????001?????0010011",
    "BEXTI" -> M"b010010???????????101?????0010011",
    "BINVI" -> M"b011010???????????001?????0010011",
    "BSETI" -> M"b001010???????????001?????0010011",
  )
  val ZBS32Type = Map(
    "BCLRI_RV32" -> M"b0100100??????????001?????0010011",
    "BEXTI_RV32" -> M"b0100100??????????101?????0010011",
    "BINVI_RV32" -> M"b0110100??????????001?????0010011",
    "BSETI_RV32" -> M"b0010100??????????001?????0010011",
  )
  val ZBEType = Map(
    "BCOMPRESS" -> M"b0000100??????????110?????0110011",
    "BDECOMPRESS" -> M"b0100100??????????110?????0110011",
    "PACK" -> M"b0000100??????????100?????0110011",
    "PACKH" -> M"b0000100??????????111?????0110011",
  )
  val ZBE64Type = Map(
    "BCOMPRESSW" -> M"b0000100??????????110?????0111011",
    "BDECOMPRESSW" -> M"b0100100??????????110?????0111011",
    "PACKW" -> M"b0000100??????????100?????0111011",
  )
  val ZBFType = Map(
    "BFP" -> M"b0100100??????????111?????0110011",
  )
  val ZBF64Type = Map(
    "BFPW" -> M"b0100100??????????111?????0111011",
  )
  val ZBM64Type = Map(
    "BMATFLIP" -> M"b011000000011?????001?????0010011",
    "BMATOR" -> M"b0000100??????????011?????0110011",
    "BMATXOR" -> M"b0100100??????????011?????0110011",
    "UNZIP16" -> M"b000010010000?????101?????0010011",
    "UNZIP8" -> M"b000010011000?????101?????0010011",
  )
  val ZKSType = Map(
    "BREV8" -> M"b011010000111?????101?????0010011",
  )
  val CType = Map(
    "C_ADD" -> M"b????????????????1001??????????10",
    "C_ADDI" -> M"b????????????????000???????????01",
    "C_ADDI16SP" -> M"b????????????????011?00010?????01",
    "C_ADDI4SPN" -> M"b????????????????000???????????00",
    "C_AND" -> M"b????????????????100011???11???01",
    "C_ANDI" -> M"b????????????????100?10????????01",
    "C_BEQZ" -> M"b????????????????110???????????01",
    "C_BNEZ" -> M"b????????????????111???????????01",
    "C_EBREAK" -> M"b????????????????1001000000000010",
    "C_J" -> M"b????????????????101???????????01",
    "C_JALR" -> M"b????????????????1001?????0000010",
    "C_JR" -> M"b????????????????1000?????0000010",
    "C_LI" -> M"b????????????????010???????????01",
    "C_LUI" -> M"b????????????????011???????????01",
    "C_LW" -> M"b????????????????010???????????00",
    "C_LWSP" -> M"b????????????????010???????????10",
    "C_MV" -> M"b????????????????1000??????????10",
    "C_NOP" -> M"b????????????????000?00000?????01",
    "C_OR" -> M"b????????????????100011???10???01",
    "C_SUB" -> M"b????????????????100011???00???01",
    "C_SW" -> M"b????????????????110???????????00",
    "C_SWSP" -> M"b????????????????110???????????10",
    "C_XOR" -> M"b????????????????100011???01???01",
  )
  val C64Type = Map(
    "C_ADDIW" -> M"b????????????????001???????????01",
    "C_ADDW" -> M"b????????????????100111???01???01",
    "C_LD" -> M"b????????????????011???????????00",
    "C_LDSP" -> M"b????????????????011???????????10",
    "C_SD" -> M"b????????????????111???????????00",
    "C_SDSP" -> M"b????????????????111???????????10",
    "C_SLLI" -> M"b????????????????000???????????10",
    "C_SRAI" -> M"b????????????????100?01????????01",
    "C_SRLI" -> M"b????????????????100?00????????01",
    "C_SUBW" -> M"b????????????????100111???00???01",
  )
  val C_DType = Map(
    "C_FLD" -> M"b????????????????001???????????00",
    "C_FLDSP" -> M"b????????????????001???????????10",
    "C_FSD" -> M"b????????????????101???????????00",
    "C_FSDSP" -> M"b????????????????101???????????10",
  )
  val C_F32Type = Map(
    "C_FLW" -> M"b????????????????011???????????00",
    "C_FLWSP" -> M"b????????????????011???????????10",
    "C_FSW" -> M"b????????????????111???????????00",
    "C_FSWSP" -> M"b????????????????111???????????10",
  )
  val C32Type = Map(
    "C_JAL" -> M"b????????????????001???????????01",
    "C_SLLI_RV32" -> M"b????????????????0000??????????10",
    "C_SRAI_RV32" -> M"b????????????????100001????????01",
    "C_SRLI_RV32" -> M"b????????????????100000????????01",
  )
  val ZCBType = Map(
    "C_LBU" -> M"b????????????????100000????????00",
    "C_LH" -> M"b????????????????100001???1????00",
    "C_LHU" -> M"b????????????????100001???0????00",
    "C_MUL" -> M"b????????????????100111???10???01",
    "C_NOT" -> M"b????????????????100111???1110101",
    "C_SB" -> M"b????????????????100010????????00",
    "C_SEXT_B" -> M"b????????????????100111???1100101",
    "C_SEXT_H" -> M"b????????????????100111???1101101",
    "C_SH" -> M"b????????????????100011???0????00",
    "C_ZEXT_B" -> M"b????????????????100111???1100001",
    "C_ZEXT_H" -> M"b????????????????100111???1101001",
  )
  val C128Type = Map(
    "C_LQ" -> M"b????????????????001???????????00",
    "C_LQSP" -> M"b????????????????001???????????10",
    "C_SQ" -> M"b????????????????101???????????00",
    "C_SQSP" -> M"b????????????????101???????????10",
  )
  val ZCMOPType = Map(
    "C_MOP_1" -> M"b????????????????0110000010000001",
    "C_MOP_11" -> M"b????????????????0110010110000001",
    "C_MOP_13" -> M"b????????????????0110011010000001",
    "C_MOP_15" -> M"b????????????????0110011110000001",
    "C_MOP_3" -> M"b????????????????0110000110000001",
    "C_MOP_5" -> M"b????????????????0110001010000001",
    "C_MOP_7" -> M"b????????????????0110001110000001",
    "C_MOP_9" -> M"b????????????????0110010010000001",
    "C_MOP_N" -> M"b????????????????01100???10000001",
  )
  val C_ZIHINTNTLType = Map(
    "C_NTL_ALL" -> M"b????????????????1001000000010110",
    "C_NTL_P1" -> M"b????????????????1001000000001010",
    "C_NTL_PALL" -> M"b????????????????1001000000001110",
    "C_NTL_S1" -> M"b????????????????1001000000010010",
  )
  val C_ZICFISSType = Map(
    "C_SSPOPCHK_X5" -> M"b????????????????0110001010000001",
    "C_SSPUSH_X1" -> M"b????????????????0110000010000001",
  )
  val ZCB64Type = Map(
    "C_ZEXT_W" -> M"b????????????????100111???1110001",
  )
  val ZICBOType = Map(
    "CBO_CLEAN" -> M"b000000000001?????010000000001111",
    "CBO_FLUSH" -> M"b000000000010?????010000000001111",
    "CBO_INVAL" -> M"b000000000000?????010000000001111",
    "CBO_ZERO" -> M"b000000000100?????010000000001111",
    "PREFETCH_I" -> M"b???????00000?????110000000010011",
    "PREFETCH_R" -> M"b???????00001?????110000000010011",
    "PREFETCH_W" -> M"b???????00011?????110000000010011",
  )
  val ZBCType = Map(
    "CLMUL" -> M"b0000101??????????001?????0110011",
    "CLMULH" -> M"b0000101??????????011?????0110011",
    "CLMULR" -> M"b0000101??????????010?????0110011",
  )
  val ZBB64Type = Map(
    "CLZW" -> M"b011000000000?????001?????0011011",
    "CPOPW" -> M"b011000000010?????001?????0011011",
    "CTZW" -> M"b011000000001?????001?????0011011",
    "ROLW" -> M"b0110000??????????001?????0111011",
    "RORI" -> M"b011000???????????101?????0010011",
    "RORIW" -> M"b0110000??????????101?????0011011",
    "RORW" -> M"b0110000??????????101?????0111011",
    "ZEXT_H" -> M"b000010000000?????100?????0111011",
  )
  val ZCMTType = Map(
    "CM_JALT" -> M"b????????????????101000????????10",
  )
  val ZCMPType = Map(
    "CM_MVA01S" -> M"b????????????????101011???11???10",
    "CM_MVSA01" -> M"b????????????????101011???01???10",
    "CM_POP" -> M"b????????????????10111010??????10",
    "CM_POPRET" -> M"b????????????????10111110??????10",
    "CM_POPRETZ" -> M"b????????????????10111100??????10",
    "CM_PUSH" -> M"b????????????????10111000??????10",
  )
  val ZBTType = Map(
    "CMIX" -> M"b?????11??????????001?????0110011",
    "CMOV" -> M"b?????11??????????101?????0110011",
    "FSL" -> M"b?????10??????????001?????0110011",
    "FSR" -> M"b?????10??????????101?????0110011",
  )
  val ZBRType = Map(
    "CRC32_B" -> M"b011000010000?????001?????0010011",
    "CRC32_H" -> M"b011000010001?????001?????0010011",
    "CRC32_W" -> M"b011000010010?????001?????0010011",
    "CRC32C_B" -> M"b011000011000?????001?????0010011",
    "CRC32C_H" -> M"b011000011001?????001?????0010011",
    "CRC32C_W" -> M"b011000011010?????001?????0010011",
  )
  val ZBR64Type = Map(
    "CRC32_D" -> M"b011000010011?????001?????0010011",
    "CRC32C_D" -> M"b011000011011?????001?????0010011",
  )
  val ZICSRType = Map(
    "CSRRC" -> M"b?????????????????011?????1110011",
    "CSRRCI" -> M"b?????????????????111?????1110011",
    "CSRRS" -> M"b?????????????????010?????1110011",
    "CSRRSI" -> M"b?????????????????110?????1110011",
    "CSRRW" -> M"b?????????????????001?????1110011",
    "CSRRWI" -> M"b?????????????????101?????1110011",
    "FRCSR" -> M"b00000000001100000010?????1110011",
    "FRFLAGS" -> M"b00000000000100000010?????1110011",
    "FRRM" -> M"b00000000001000000010?????1110011",
    "FSCSR" -> M"b000000000011?????001?????1110011",
    "FSFLAGS" -> M"b000000000001?????001?????1110011",
    "FSFLAGSI" -> M"b000000000001?????101?????1110011",
    "FSRM" -> M"b000000000010?????001?????1110011",
    "FSRMI" -> M"b000000000010?????101?????1110011",
    "RDCYCLE" -> M"b11000000000000000010?????1110011",
    "RDCYCLEH" -> M"b11001000000000000010?????1110011",
    "RDINSTRET" -> M"b11000000001000000010?????1110011",
    "RDINSTRETH" -> M"b11001000001000000010?????1110011",
    "RDTIME" -> M"b11000000000100000010?????1110011",
    "RDTIMEH" -> M"b11001000000100000010?????1110011",
  )
  val ZICONDType = Map(
    "CZERO_EQZ" -> M"b0000111??????????101?????0110011",
    "CZERO_NEZ" -> M"b0000111??????????111?????0110011",
  )
  val MType = Map(
    "DIV" -> M"b0000001??????????100?????0110011",
    "DIVU" -> M"b0000001??????????101?????0110011",
    "MUL" -> M"b0000001??????????000?????0110011",
    "MULH" -> M"b0000001??????????001?????0110011",
    "MULHSU" -> M"b0000001??????????010?????0110011",
    "MULHU" -> M"b0000001??????????011?????0110011",
    "REM" -> M"b0000001??????????110?????0110011",
    "REMU" -> M"b0000001??????????111?????0110011",
  )
  val M64Type = Map(
    "DIVUW" -> M"b0000001??????????101?????0111011",
    "DIVW" -> M"b0000001??????????100?????0111011",
    "MULW" -> M"b0000001??????????000?????0111011",
    "REMUW" -> M"b0000001??????????111?????0111011",
    "REMW" -> M"b0000001??????????110?????0111011",
  )
  val SDEXTType = Map(
    "DRET" -> M"b01111011001000000000000001110011",
  )
  val DType = Map(
    "FADD_D" -> M"b0000001??????????????????1010011",
    "FCLASS_D" -> M"b111000100000?????001?????1010011",
    "FCVT_D_S" -> M"b010000100000?????????????1010011",
    "FCVT_D_W" -> M"b110100100000?????????????1010011",
    "FCVT_D_WU" -> M"b110100100001?????????????1010011",
    "FCVT_S_D" -> M"b010000000001?????????????1010011",
    "FCVT_W_D" -> M"b110000100000?????????????1010011",
    "FCVT_WU_D" -> M"b110000100001?????????????1010011",
    "FDIV_D" -> M"b0001101??????????????????1010011",
    "FEQ_D" -> M"b1010001??????????010?????1010011",
    "FLD" -> M"b?????????????????011?????0000111",
    "FLE_D" -> M"b1010001??????????000?????1010011",
    "FLT_D" -> M"b1010001??????????001?????1010011",
    "FMADD_D" -> M"b?????01??????????????????1000011",
    "FMAX_D" -> M"b0010101??????????001?????1010011",
    "FMIN_D" -> M"b0010101??????????000?????1010011",
    "FMSUB_D" -> M"b?????01??????????????????1000111",
    "FMUL_D" -> M"b0001001??????????????????1010011",
    "FNMADD_D" -> M"b?????01??????????????????1001111",
    "FNMSUB_D" -> M"b?????01??????????????????1001011",
    "FSD" -> M"b?????????????????011?????0100111",
    "FSGNJ_D" -> M"b0010001??????????000?????1010011",
    "FSGNJN_D" -> M"b0010001??????????001?????1010011",
    "FSGNJX_D" -> M"b0010001??????????010?????1010011",
    "FSQRT_D" -> M"b010110100000?????????????1010011",
    "FSUB_D" -> M"b0000101??????????????????1010011",
  )
  val ZFHType = Map(
    "FADD_H" -> M"b0000010??????????????????1010011",
    "FCLASS_H" -> M"b111001000000?????001?????1010011",
    "FCVT_H_S" -> M"b010001000000?????????????1010011",
    "FCVT_H_W" -> M"b110101000000?????????????1010011",
    "FCVT_H_WU" -> M"b110101000001?????????????1010011",
    "FCVT_S_H" -> M"b010000000010?????????????1010011",
    "FCVT_W_H" -> M"b110001000000?????????????1010011",
    "FCVT_WU_H" -> M"b110001000001?????????????1010011",
    "FDIV_H" -> M"b0001110??????????????????1010011",
    "FEQ_H" -> M"b1010010??????????010?????1010011",
    "FLE_H" -> M"b1010010??????????000?????1010011",
    "FLH" -> M"b?????????????????001?????0000111",
    "FLT_H" -> M"b1010010??????????001?????1010011",
    "FMADD_H" -> M"b?????10??????????????????1000011",
    "FMAX_H" -> M"b0010110??????????001?????1010011",
    "FMIN_H" -> M"b0010110??????????000?????1010011",
    "FMSUB_H" -> M"b?????10??????????????????1000111",
    "FMUL_H" -> M"b0001010??????????????????1010011",
    "FMV_H_X" -> M"b111101000000?????000?????1010011",
    "FMV_X_H" -> M"b111001000000?????000?????1010011",
    "FNMADD_H" -> M"b?????10??????????????????1001111",
    "FNMSUB_H" -> M"b?????10??????????????????1001011",
    "FSGNJ_H" -> M"b0010010??????????000?????1010011",
    "FSGNJN_H" -> M"b0010010??????????001?????1010011",
    "FSGNJX_H" -> M"b0010010??????????010?????1010011",
    "FSH" -> M"b?????????????????001?????0100111",
    "FSQRT_H" -> M"b010111000000?????????????1010011",
    "FSUB_H" -> M"b0000110??????????????????1010011",
  )
  val QType = Map(
    "FADD_Q" -> M"b0000011??????????????????1010011",
    "FCLASS_Q" -> M"b111001100000?????001?????1010011",
    "FCVT_D_Q" -> M"b010000100011?????????????1010011",
    "FCVT_Q_D" -> M"b010001100001?????????????1010011",
    "FCVT_Q_S" -> M"b010001100000?????????????1010011",
    "FCVT_Q_W" -> M"b110101100000?????????????1010011",
    "FCVT_Q_WU" -> M"b110101100001?????????????1010011",
    "FCVT_S_Q" -> M"b010000000011?????????????1010011",
    "FCVT_W_Q" -> M"b110001100000?????????????1010011",
    "FCVT_WU_Q" -> M"b110001100001?????????????1010011",
    "FDIV_Q" -> M"b0001111??????????????????1010011",
    "FEQ_Q" -> M"b1010011??????????010?????1010011",
    "FLE_Q" -> M"b1010011??????????000?????1010011",
    "FLQ" -> M"b?????????????????100?????0000111",
    "FLT_Q" -> M"b1010011??????????001?????1010011",
    "FMADD_Q" -> M"b?????11??????????????????1000011",
    "FMAX_Q" -> M"b0010111??????????001?????1010011",
    "FMIN_Q" -> M"b0010111??????????000?????1010011",
    "FMSUB_Q" -> M"b?????11??????????????????1000111",
    "FMUL_Q" -> M"b0001011??????????????????1010011",
    "FNMADD_Q" -> M"b?????11??????????????????1001111",
    "FNMSUB_Q" -> M"b?????11??????????????????1001011",
    "FSGNJ_Q" -> M"b0010011??????????000?????1010011",
    "FSGNJN_Q" -> M"b0010011??????????001?????1010011",
    "FSGNJX_Q" -> M"b0010011??????????010?????1010011",
    "FSQ" -> M"b?????????????????100?????0100111",
    "FSQRT_Q" -> M"b010111100000?????????????1010011",
    "FSUB_Q" -> M"b0000111??????????????????1010011",
  )
  val FType = Map(
    "FADD_S" -> M"b0000000??????????????????1010011",
    "FCLASS_S" -> M"b111000000000?????001?????1010011",
    "FCVT_S_W" -> M"b110100000000?????????????1010011",
    "FCVT_S_WU" -> M"b110100000001?????????????1010011",
    "FCVT_W_S" -> M"b110000000000?????????????1010011",
    "FCVT_WU_S" -> M"b110000000001?????????????1010011",
    "FDIV_S" -> M"b0001100??????????????????1010011",
    "FEQ_S" -> M"b1010000??????????010?????1010011",
    "FLE_S" -> M"b1010000??????????000?????1010011",
    "FLT_S" -> M"b1010000??????????001?????1010011",
    "FLW" -> M"b?????????????????010?????0000111",
    "FMADD_S" -> M"b?????00??????????????????1000011",
    "FMAX_S" -> M"b0010100??????????001?????1010011",
    "FMIN_S" -> M"b0010100??????????000?????1010011",
    "FMSUB_S" -> M"b?????00??????????????????1000111",
    "FMUL_S" -> M"b0001000??????????????????1010011",
    "FMV_S_X" -> M"b111100000000?????000?????1010011",
    "FMV_W_X" -> M"b111100000000?????000?????1010011",
    "FMV_X_S" -> M"b111000000000?????000?????1010011",
    "FMV_X_W" -> M"b111000000000?????000?????1010011",
    "FNMADD_S" -> M"b?????00??????????????????1001111",
    "FNMSUB_S" -> M"b?????00??????????????????1001011",
    "FSGNJ_S" -> M"b0010000??????????000?????1010011",
    "FSGNJN_S" -> M"b0010000??????????001?????1010011",
    "FSGNJX_S" -> M"b0010000??????????010?????1010011",
    "FSQRT_S" -> M"b010110000000?????????????1010011",
    "FSUB_S" -> M"b0000100??????????????????1010011",
    "FSW" -> M"b?????????????????010?????0100111",
  )
  val ZFBFMINType = Map(
    "FCVT_BF16_S" -> M"b010001001000?????????????1010011",
    "FCVT_S_BF16" -> M"b010000000110?????????????1010011",
  )
  val D_ZFHType = Map(
    "FCVT_D_H" -> M"b010000100010?????????????1010011",
    "FCVT_H_D" -> M"b010001000001?????????????1010011",
  )
  val D64Type = Map(
    "FCVT_D_L" -> M"b110100100010?????????????1010011",
    "FCVT_D_LU" -> M"b110100100011?????????????1010011",
    "FCVT_L_D" -> M"b110000100010?????????????1010011",
    "FCVT_LU_D" -> M"b110000100011?????????????1010011",
    "FMV_D_X" -> M"b111100100000?????000?????1010011",
    "FMV_X_D" -> M"b111000100000?????000?????1010011",
  )
  val ZFH64Type = Map(
    "FCVT_H_L" -> M"b110101000010?????????????1010011",
    "FCVT_H_LU" -> M"b110101000011?????????????1010011",
    "FCVT_L_H" -> M"b110001000010?????????????1010011",
    "FCVT_LU_H" -> M"b110001000011?????????????1010011",
  )
  val Q_ZFHType = Map(
    "FCVT_H_Q" -> M"b010001000011?????????????1010011",
    "FCVT_Q_H" -> M"b010001100010?????????????1010011",
  )
  val Q64Type = Map(
    "FCVT_L_Q" -> M"b110001100010?????????????1010011",
    "FCVT_LU_Q" -> M"b110001100011?????????????1010011",
    "FCVT_Q_L" -> M"b110101100010?????????????1010011",
    "FCVT_Q_LU" -> M"b110101100011?????????????1010011",
  )
  val F64Type = Map(
    "FCVT_L_S" -> M"b110000000010?????????????1010011",
    "FCVT_LU_S" -> M"b110000000011?????????????1010011",
    "FCVT_S_L" -> M"b110100000010?????????????1010011",
    "FCVT_S_LU" -> M"b110100000011?????????????1010011",
  )
  val D_ZFAType = Map(
    "FCVTMOD_W_D" -> M"b110000101000?????001?????1010011",
    "FLEQ_D" -> M"b1010001??????????100?????1010011",
    "FLI_D" -> M"b111100100001?????000?????1010011",
    "FLTQ_D" -> M"b1010001??????????101?????1010011",
    "FMAXM_D" -> M"b0010101??????????011?????1010011",
    "FMINM_D" -> M"b0010101??????????010?????1010011",
    "FROUND_D" -> M"b010000100100?????????????1010011",
    "FROUNDNX_D" -> M"b010000100101?????????????1010011",
  )
  val ZIFENCEIType = Map(
    "FENCE_I" -> M"b?????????????????001?????0001111",
  )
  val ZFH_ZFAType = Map(
    "FLEQ_H" -> M"b1010010??????????100?????1010011",
    "FLI_H" -> M"b111101000001?????000?????1010011",
    "FLTQ_H" -> M"b1010010??????????101?????1010011",
    "FMAXM_H" -> M"b0010110??????????011?????1010011",
    "FMINM_H" -> M"b0010110??????????010?????1010011",
    "FROUND_H" -> M"b010001000100?????????????1010011",
    "FROUNDNX_H" -> M"b010001000101?????????????1010011",
  )
  val Q_ZFAType = Map(
    "FLEQ_Q" -> M"b1010011??????????100?????1010011",
    "FLI_Q" -> M"b111101100001?????000?????1010011",
    "FLTQ_Q" -> M"b1010011??????????101?????1010011",
    "FMAXM_Q" -> M"b0010111??????????011?????1010011",
    "FMINM_Q" -> M"b0010111??????????010?????1010011",
    "FROUND_Q" -> M"b010001100100?????????????1010011",
    "FROUNDNX_Q" -> M"b010001100101?????????????1010011",
  )
  val F_ZFAType = Map(
    "FLEQ_S" -> M"b1010000??????????100?????1010011",
    "FLI_S" -> M"b111100000001?????000?????1010011",
    "FLTQ_S" -> M"b1010000??????????101?????1010011",
    "FMAXM_S" -> M"b0010100??????????011?????1010011",
    "FMINM_S" -> M"b0010100??????????010?????1010011",
    "FROUND_S" -> M"b010000000100?????????????1010011",
    "FROUNDNX_S" -> M"b010000000101?????????????1010011",
  )
  val D_ZFA32Type = Map(
    "FMVH_X_D" -> M"b111000100001?????000?????1010011",
    "FMVP_D_X" -> M"b1011001??????????000?????1010011",
  )
  val Q_ZFA64Type = Map(
    "FMVH_X_Q" -> M"b111001100001?????000?????1010011",
    "FMVP_Q_X" -> M"b1011011??????????000?????1010011",
  )
  val ZBT64Type = Map(
    "FSLW" -> M"b?????10??????????001?????0111011",
    "FSRI" -> M"b?????1???????????101?????0010011",
    "FSRIW" -> M"b?????10??????????101?????0011011",
    "FSRW" -> M"b?????10??????????101?????0111011",
  )
  val ZBPType = Map(
    "GORC" -> M"b0010100??????????101?????0110011",
    "GREV" -> M"b0110100??????????101?????0110011",
    "PACKU" -> M"b0100100??????????100?????0110011",
    "SHFL" -> M"b0000100??????????001?????0110011",
    "UNSHFL" -> M"b0000100??????????101?????0110011",
    "XPERM16" -> M"b0010100??????????110?????0110011",
    "XPERM4" -> M"b0010100??????????010?????0110011",
    "XPERM8" -> M"b0010100??????????100?????0110011",
  )
  val ZBP64Type = Map(
    "GORCI" -> M"b001010???????????101?????0010011",
    "GORCIW" -> M"b0010100??????????101?????0011011",
    "GORCW" -> M"b0010100??????????101?????0111011",
    "GREVI" -> M"b011010???????????101?????0010011",
    "GREVIW" -> M"b0110100??????????101?????0011011",
    "GREVW" -> M"b0110100??????????101?????0111011",
    "PACKUW" -> M"b0100100??????????100?????0111011",
    "SHFLI" -> M"b0000100??????????001?????0010011",
    "SHFLW" -> M"b0000100??????????001?????0111011",
    "UNSHFLI" -> M"b0000100??????????101?????0010011",
    "UNSHFLW" -> M"b0000100??????????101?????0111011",
    "XPERM32" -> M"b0010100??????????000?????0110011",
  )
  val HType = Map(
    "HFENCE_GVMA" -> M"b0110001??????????000000001110011",
    "HFENCE_VVMA" -> M"b0010001??????????000000001110011",
    "HLV_B" -> M"b011000000000?????100?????1110011",
    "HLV_BU" -> M"b011000000001?????100?????1110011",
    "HLV_H" -> M"b011001000000?????100?????1110011",
    "HLV_HU" -> M"b011001000001?????100?????1110011",
    "HLV_W" -> M"b011010000000?????100?????1110011",
    "HLVX_HU" -> M"b011001000011?????100?????1110011",
    "HLVX_WU" -> M"b011010000011?????100?????1110011",
    "HSV_B" -> M"b0110001??????????100000001110011",
    "HSV_H" -> M"b0110011??????????100000001110011",
    "HSV_W" -> M"b0110101??????????100000001110011",
  )
  val SVINVALType = Map(
    "HINVAL_GVMA" -> M"b0110011??????????000000001110011",
    "HINVAL_VVMA" -> M"b0010011??????????000000001110011",
    "SFENCE_INVAL_IR" -> M"b00011000000100000000000001110011",
    "SFENCE_W_INVAL" -> M"b00011000000000000000000001110011",
    "SINVAL_VMA" -> M"b0001011??????????000000001110011",
  )
  val H64Type = Map(
    "HLV_D" -> M"b011011000000?????100?????1110011",
    "HLV_WU" -> M"b011010000001?????100?????1110011",
    "HSV_D" -> M"b0110111??????????100000001110011",
  )
  val ZPSFType = Map(
    "KADD64" -> M"b1001000??????????001?????1110111",
    "KMAR64" -> M"b1001010??????????001?????1110111",
    "KMSR64" -> M"b1001011??????????001?????1110111",
    "KSUB64" -> M"b1001001??????????001?????1110111",
    "MULR64" -> M"b1111000??????????001?????1110111",
    "MULSR64" -> M"b1110000??????????001?????1110111",
    "RADD64" -> M"b1000000??????????001?????1110111",
    "RSUB64" -> M"b1000001??????????001?????1110111",
    "SMAL" -> M"b0101111??????????001?????1110111",
    "SMALBB" -> M"b1000100??????????001?????1110111",
    "SMALBT" -> M"b1001100??????????001?????1110111",
    "SMALDA" -> M"b1000110??????????001?????1110111",
    "SMALDRS" -> M"b1001101??????????001?????1110111",
    "SMALDS" -> M"b1000101??????????001?????1110111",
    "SMALTT" -> M"b1010100??????????001?????1110111",
    "SMALXDA" -> M"b1001110??????????001?????1110111",
    "SMALXDS" -> M"b1010101??????????001?????1110111",
    "SMAR64" -> M"b1000010??????????001?????1110111",
    "SMSLDA" -> M"b1010110??????????001?????1110111",
    "SMSLXDA" -> M"b1011110??????????001?????1110111",
    "SMSR64" -> M"b1000011??????????001?????1110111",
    "SMUL16" -> M"b1010000??????????000?????1110111",
    "SMUL8" -> M"b1010100??????????000?????1110111",
    "SMULX16" -> M"b1010001??????????000?????1110111",
    "SMULX8" -> M"b1010101??????????000?????1110111",
    "UKADD64" -> M"b1011000??????????001?????1110111",
    "UKMAR64" -> M"b1011010??????????001?????1110111",
    "UKMSR64" -> M"b1011011??????????001?????1110111",
    "UKSUB64" -> M"b1011001??????????001?????1110111",
    "UMAR64" -> M"b1010010??????????001?????1110111",
    "UMSR64" -> M"b1010011??????????001?????1110111",
    "UMUL16" -> M"b1011000??????????000?????1110111",
    "UMUL8" -> M"b1011100??????????000?????1110111",
    "UMULX16" -> M"b1011001??????????000?????1110111",
    "UMULX8" -> M"b1011101??????????000?????1110111",
    "URADD64" -> M"b1010000??????????001?????1110111",
    "URSUB64" -> M"b1010001??????????001?????1110111",
  )
  val ZALASRType = Map(
    "LB_AQ" -> M"b001101?00000?????000?????0101111",
    "LD_AQ" -> M"b001101?00000?????011?????0101111",
    "LH_AQ" -> M"b001101?00000?????001?????0101111",
    "LW_AQ" -> M"b001101?00000?????010?????0101111",
    "SB_RL" -> M"b00111?1??????????000000000101111",
    "SD_RL" -> M"b00111?1??????????011000000101111",
    "SH_RL" -> M"b00111?1??????????001000000101111",
    "SW_RL" -> M"b00111?1??????????010000000101111",
  )
  val ZICFILPType = Map(
    "LPAD" -> M"b????????????????????000000010111",
  )
  val SMRNMIType = Map(
    "MNRET" -> M"b01110000001000000000000001110011",
  )
  val ZIMOPType = Map(
    "MOP_R_0" -> M"b100000011100?????100?????1110011",
    "MOP_R_1" -> M"b100000011101?????100?????1110011",
    "MOP_R_10" -> M"b100010011110?????100?????1110011",
    "MOP_R_11" -> M"b100010011111?????100?????1110011",
    "MOP_R_12" -> M"b100011011100?????100?????1110011",
    "MOP_R_13" -> M"b100011011101?????100?????1110011",
    "MOP_R_14" -> M"b100011011110?????100?????1110011",
    "MOP_R_15" -> M"b100011011111?????100?????1110011",
    "MOP_R_16" -> M"b110000011100?????100?????1110011",
    "MOP_R_17" -> M"b110000011101?????100?????1110011",
    "MOP_R_18" -> M"b110000011110?????100?????1110011",
    "MOP_R_19" -> M"b110000011111?????100?????1110011",
    "MOP_R_2" -> M"b100000011110?????100?????1110011",
    "MOP_R_20" -> M"b110001011100?????100?????1110011",
    "MOP_R_21" -> M"b110001011101?????100?????1110011",
    "MOP_R_22" -> M"b110001011110?????100?????1110011",
    "MOP_R_23" -> M"b110001011111?????100?????1110011",
    "MOP_R_24" -> M"b110010011100?????100?????1110011",
    "MOP_R_25" -> M"b110010011101?????100?????1110011",
    "MOP_R_26" -> M"b110010011110?????100?????1110011",
    "MOP_R_27" -> M"b110010011111?????100?????1110011",
    "MOP_R_28" -> M"b110011011100?????100?????1110011",
    "MOP_R_29" -> M"b110011011101?????100?????1110011",
    "MOP_R_3" -> M"b100000011111?????100?????1110011",
    "MOP_R_30" -> M"b110011011110?????100?????1110011",
    "MOP_R_31" -> M"b110011011111?????100?????1110011",
    "MOP_R_4" -> M"b100001011100?????100?????1110011",
    "MOP_R_5" -> M"b100001011101?????100?????1110011",
    "MOP_R_6" -> M"b100001011110?????100?????1110011",
    "MOP_R_7" -> M"b100001011111?????100?????1110011",
    "MOP_R_8" -> M"b100010011100?????100?????1110011",
    "MOP_R_9" -> M"b100010011101?????100?????1110011",
    "MOP_R_N" -> M"b1?00??0111???????100?????1110011",
    "MOP_RR_0" -> M"b1000001??????????100?????1110011",
    "MOP_RR_1" -> M"b1000011??????????100?????1110011",
    "MOP_RR_2" -> M"b1000101??????????100?????1110011",
    "MOP_RR_3" -> M"b1000111??????????100?????1110011",
    "MOP_RR_4" -> M"b1100001??????????100?????1110011",
    "MOP_RR_5" -> M"b1100011??????????100?????1110011",
    "MOP_RR_6" -> M"b1100101??????????100?????1110011",
    "MOP_RR_7" -> M"b1100111??????????100?????1110011",
    "MOP_RR_N" -> M"b1?00??1??????????100?????1110011",
  )
  val SYSTEMType = Map(
    "MRET" -> M"b00110000001000000000000001110011",
    "WFI" -> M"b00010000010100000000000001110011",
  )
  val ZIHINTNTLType = Map(
    "NTL_ALL" -> M"b00000000010100000000000000110011",
    "NTL_P1" -> M"b00000000001000000000000000110011",
    "NTL_PALL" -> M"b00000000001100000000000000110011",
    "NTL_S1" -> M"b00000000010000000000000000110011",
  )
  val ZBPBO64Type = Map(
    "REV" -> M"b011010111111?????101?????0010011",
  )
  val ZKS64Type = Map(
    "REV8" -> M"b011010111000?????101?????0010011",
  )
  val ZBPBOType = Map(
    "REV8_H" -> M"b011010001000?????101?????0010011",
  )
  val ZKS32Type = Map(
    "REV8_RV32" -> M"b011010011000?????101?????0010011",
    "RORI_RV32" -> M"b0110000??????????101?????0010011",
    "UNZIP" -> M"b000010001111?????101?????0010011",
    "ZIP" -> M"b000010001111?????001?????0010011",
  )
  val SType = Map(
    "SFENCE_VMA" -> M"b0001001??????????000000001110011",
    "SRET" -> M"b00010000001000000000000001110011",
  )
  val ZBAType = Map(
    "SH1ADD" -> M"b0010000??????????010?????0110011",
    "SH2ADD" -> M"b0010000??????????100?????0110011",
    "SH3ADD" -> M"b0010000??????????110?????0110011",
  )
  val ZKNHType = Map(
    "SHA256SIG0" -> M"b000100000010?????001?????0010011",
    "SHA256SIG1" -> M"b000100000011?????001?????0010011",
    "SHA256SUM0" -> M"b000100000000?????001?????0010011",
    "SHA256SUM1" -> M"b000100000001?????001?????0010011",
  )
  val ZKNH64Type = Map(
    "SHA512SIG0" -> M"b000100000110?????001?????0010011",
    "SHA512SIG1" -> M"b000100000111?????001?????0010011",
    "SHA512SUM0" -> M"b000100000100?????001?????0010011",
    "SHA512SUM1" -> M"b000100000101?????001?????0010011",
  )
  val ZKNH32Type = Map(
    "SHA512SIG0H" -> M"b0101110??????????000?????0110011",
    "SHA512SIG0L" -> M"b0101010??????????000?????0110011",
    "SHA512SIG1H" -> M"b0101111??????????000?????0110011",
    "SHA512SIG1L" -> M"b0101011??????????000?????0110011",
    "SHA512SUM0R" -> M"b0101000??????????000?????0110011",
    "SHA512SUM1R" -> M"b0101001??????????000?????0110011",
  )
  val I32Type = Map(
    "SLLI_RV32" -> M"b0000000??????????001?????0010011",
    "SRAI_RV32" -> M"b0100000??????????101?????0010011",
    "SRLI_RV32" -> M"b0000000??????????101?????0010011",
  )
  val BType = Map(
    "SLO" -> M"b0010000??????????001?????0110011",
    "SLOI" -> M"b001000???????????001?????0010011",
    "SRO" -> M"b0010000??????????101?????0110011",
    "SROI" -> M"b001000???????????101?????0010011",
  )
  val B64Type = Map(
    "SLOIW" -> M"b0010000??????????001?????0011011",
    "SLOW" -> M"b0010000??????????001?????0111011",
    "SROIW" -> M"b0010000??????????101?????0011011",
    "SROW" -> M"b0010000??????????101?????0111011",
  )
  val ZKSHType = Map(
    "SM3P0" -> M"b000100001000?????001?????0010011",
    "SM3P1" -> M"b000100001001?????001?????0010011",
  )
  val ZKSEDType = Map(
    "SM4ED" -> M"b??11000??????????000?????0110011",
    "SM4KS" -> M"b??11010??????????000?????0110011",
  )
  val ZICFISSType = Map(
    "SSAMOSWAP_D" -> M"b01001????????????011?????0101111",
    "SSAMOSWAP_W" -> M"b01001????????????010?????0101111",
    "SSPOPCHK_X1" -> M"b11001101110000001100000001110011",
    "SSPOPCHK_X5" -> M"b11001101110000101100000001110011",
    "SSPUSH_X1" -> M"b11001110000100000100000001110011",
    "SSPUSH_X5" -> M"b11001110010100000100000001110011",
    "SSRDP" -> M"b11001101110000000100?????1110011",
  )
  val VType = Map(
    "VAADD_VV" -> M"b001001???????????010?????1010111",
    "VAADD_VX" -> M"b001001???????????110?????1010111",
    "VAADDU_VV" -> M"b001000???????????010?????1010111",
    "VAADDU_VX" -> M"b001000???????????110?????1010111",
    "VADC_VIM" -> M"b0100000??????????011?????1010111",
    "VADC_VVM" -> M"b0100000??????????000?????1010111",
    "VADC_VXM" -> M"b0100000??????????100?????1010111",
    "VADD_VI" -> M"b000000???????????011?????1010111",
    "VADD_VV" -> M"b000000???????????000?????1010111",
    "VADD_VX" -> M"b000000???????????100?????1010111",
    "VAND_VI" -> M"b001001???????????011?????1010111",
    "VAND_VV" -> M"b001001???????????000?????1010111",
    "VAND_VX" -> M"b001001???????????100?????1010111",
    "VASUB_VV" -> M"b001011???????????010?????1010111",
    "VASUB_VX" -> M"b001011???????????110?????1010111",
    "VASUBU_VV" -> M"b001010???????????010?????1010111",
    "VASUBU_VX" -> M"b001010???????????110?????1010111",
    "VCOMPRESS_VM" -> M"b0101111??????????010?????1010111",
    "VCPOP_M" -> M"b010000??????10000010?????1010111",
    "VDIV_VV" -> M"b100001???????????010?????1010111",
    "VDIV_VX" -> M"b100001???????????110?????1010111",
    "VDIVU_VV" -> M"b100000???????????010?????1010111",
    "VDIVU_VX" -> M"b100000???????????110?????1010111",
    "VFADD_VF" -> M"b000000???????????101?????1010111",
    "VFADD_VV" -> M"b000000???????????001?????1010111",
    "VFCLASS_V" -> M"b010011??????10000001?????1010111",
    "VFCVT_F_X_V" -> M"b010010??????00011001?????1010111",
    "VFCVT_F_XU_V" -> M"b010010??????00010001?????1010111",
    "VFCVT_RTZ_X_F_V" -> M"b010010??????00111001?????1010111",
    "VFCVT_RTZ_XU_F_V" -> M"b010010??????00110001?????1010111",
    "VFCVT_X_F_V" -> M"b010010??????00001001?????1010111",
    "VFCVT_XU_F_V" -> M"b010010??????00000001?????1010111",
    "VFDIV_VF" -> M"b100000???????????101?????1010111",
    "VFDIV_VV" -> M"b100000???????????001?????1010111",
    "VFIRST_M" -> M"b010000??????10001010?????1010111",
    "VFMACC_VF" -> M"b101100???????????101?????1010111",
    "VFMACC_VV" -> M"b101100???????????001?????1010111",
    "VFMADD_VF" -> M"b101000???????????101?????1010111",
    "VFMADD_VV" -> M"b101000???????????001?????1010111",
    "VFMAX_VF" -> M"b000110???????????101?????1010111",
    "VFMAX_VV" -> M"b000110???????????001?????1010111",
    "VFMERGE_VFM" -> M"b0101110??????????101?????1010111",
    "VFMIN_VF" -> M"b000100???????????101?????1010111",
    "VFMIN_VV" -> M"b000100???????????001?????1010111",
    "VFMSAC_VF" -> M"b101110???????????101?????1010111",
    "VFMSAC_VV" -> M"b101110???????????001?????1010111",
    "VFMSUB_VF" -> M"b101010???????????101?????1010111",
    "VFMSUB_VV" -> M"b101010???????????001?????1010111",
    "VFMUL_VF" -> M"b100100???????????101?????1010111",
    "VFMUL_VV" -> M"b100100???????????001?????1010111",
    "VFMV_F_S" -> M"b0100001?????00000001?????1010111",
    "VFMV_S_F" -> M"b010000100000?????101?????1010111",
    "VFMV_V_F" -> M"b010111100000?????101?????1010111",
    "VFNCVT_F_F_W" -> M"b010010??????10100001?????1010111",
    "VFNCVT_F_X_W" -> M"b010010??????10011001?????1010111",
    "VFNCVT_F_XU_W" -> M"b010010??????10010001?????1010111",
    "VFNCVT_ROD_F_F_W" -> M"b010010??????10101001?????1010111",
    "VFNCVT_RTZ_X_F_W" -> M"b010010??????10111001?????1010111",
    "VFNCVT_RTZ_XU_F_W" -> M"b010010??????10110001?????1010111",
    "VFNCVT_X_F_W" -> M"b010010??????10001001?????1010111",
    "VFNCVT_XU_F_W" -> M"b010010??????10000001?????1010111",
    "VFNMACC_VF" -> M"b101101???????????101?????1010111",
    "VFNMACC_VV" -> M"b101101???????????001?????1010111",
    "VFNMADD_VF" -> M"b101001???????????101?????1010111",
    "VFNMADD_VV" -> M"b101001???????????001?????1010111",
    "VFNMSAC_VF" -> M"b101111???????????101?????1010111",
    "VFNMSAC_VV" -> M"b101111???????????001?????1010111",
    "VFNMSUB_VF" -> M"b101011???????????101?????1010111",
    "VFNMSUB_VV" -> M"b101011???????????001?????1010111",
    "VFRDIV_VF" -> M"b100001???????????101?????1010111",
    "VFREC7_V" -> M"b010011??????00101001?????1010111",
    "VFREDMAX_VS" -> M"b000111???????????001?????1010111",
    "VFREDMIN_VS" -> M"b000101???????????001?????1010111",
    "VFREDOSUM_VS" -> M"b000011???????????001?????1010111",
    "VFREDUSUM_VS" -> M"b000001???????????001?????1010111",
    "VFRSQRT7_V" -> M"b010011??????00100001?????1010111",
    "VFRSUB_VF" -> M"b100111???????????101?????1010111",
    "VFSGNJ_VF" -> M"b001000???????????101?????1010111",
    "VFSGNJ_VV" -> M"b001000???????????001?????1010111",
    "VFSGNJN_VF" -> M"b001001???????????101?????1010111",
    "VFSGNJN_VV" -> M"b001001???????????001?????1010111",
    "VFSGNJX_VF" -> M"b001010???????????101?????1010111",
    "VFSGNJX_VV" -> M"b001010???????????001?????1010111",
    "VFSLIDE1DOWN_VF" -> M"b001111???????????101?????1010111",
    "VFSLIDE1UP_VF" -> M"b001110???????????101?????1010111",
    "VFSQRT_V" -> M"b010011??????00000001?????1010111",
    "VFSUB_VF" -> M"b000010???????????101?????1010111",
    "VFSUB_VV" -> M"b000010???????????001?????1010111",
    "VFWADD_VF" -> M"b110000???????????101?????1010111",
    "VFWADD_VV" -> M"b110000???????????001?????1010111",
    "VFWADD_WF" -> M"b110100???????????101?????1010111",
    "VFWADD_WV" -> M"b110100???????????001?????1010111",
    "VFWCVT_F_F_V" -> M"b010010??????01100001?????1010111",
    "VFWCVT_F_X_V" -> M"b010010??????01011001?????1010111",
    "VFWCVT_F_XU_V" -> M"b010010??????01010001?????1010111",
    "VFWCVT_RTZ_X_F_V" -> M"b010010??????01111001?????1010111",
    "VFWCVT_RTZ_XU_F_V" -> M"b010010??????01110001?????1010111",
    "VFWCVT_X_F_V" -> M"b010010??????01001001?????1010111",
    "VFWCVT_XU_F_V" -> M"b010010??????01000001?????1010111",
    "VFWMACC_VF" -> M"b111100???????????101?????1010111",
    "VFWMACC_VV" -> M"b111100???????????001?????1010111",
    "VFWMSAC_VF" -> M"b111110???????????101?????1010111",
    "VFWMSAC_VV" -> M"b111110???????????001?????1010111",
    "VFWMUL_VF" -> M"b111000???????????101?????1010111",
    "VFWMUL_VV" -> M"b111000???????????001?????1010111",
    "VFWNMACC_VF" -> M"b111101???????????101?????1010111",
    "VFWNMACC_VV" -> M"b111101???????????001?????1010111",
    "VFWNMSAC_VF" -> M"b111111???????????101?????1010111",
    "VFWNMSAC_VV" -> M"b111111???????????001?????1010111",
    "VFWREDOSUM_VS" -> M"b110011???????????001?????1010111",
    "VFWREDUSUM_VS" -> M"b110001???????????001?????1010111",
    "VFWSUB_VF" -> M"b110010???????????101?????1010111",
    "VFWSUB_VV" -> M"b110010???????????001?????1010111",
    "VFWSUB_WF" -> M"b110110???????????101?????1010111",
    "VFWSUB_WV" -> M"b110110???????????001?????1010111",
    "VID_V" -> M"b010100?0000010001010?????1010111",
    "VIOTA_M" -> M"b010100??????10000010?????1010111",
    "VL1RE16_V" -> M"b000000101000?????101?????0000111",
    "VL1RE32_V" -> M"b000000101000?????110?????0000111",
    "VL1RE64_V" -> M"b000000101000?????111?????0000111",
    "VL1RE8_V" -> M"b000000101000?????000?????0000111",
    "VL2RE16_V" -> M"b001000101000?????101?????0000111",
    "VL2RE32_V" -> M"b001000101000?????110?????0000111",
    "VL2RE64_V" -> M"b001000101000?????111?????0000111",
    "VL2RE8_V" -> M"b001000101000?????000?????0000111",
    "VL4RE16_V" -> M"b011000101000?????101?????0000111",
    "VL4RE32_V" -> M"b011000101000?????110?????0000111",
    "VL4RE64_V" -> M"b011000101000?????111?????0000111",
    "VL4RE8_V" -> M"b011000101000?????000?????0000111",
    "VL8RE16_V" -> M"b111000101000?????101?????0000111",
    "VL8RE32_V" -> M"b111000101000?????110?????0000111",
    "VL8RE64_V" -> M"b111000101000?????111?????0000111",
    "VL8RE8_V" -> M"b111000101000?????000?????0000111",
    "VLE1024_V" -> M"b???100?00000?????111?????0000111",
    "VLE1024FF_V" -> M"b???100?10000?????111?????0000111",
    "VLE128_V" -> M"b???100?00000?????000?????0000111",
    "VLE128FF_V" -> M"b???100?10000?????000?????0000111",
    "VLE16_V" -> M"b???000?00000?????101?????0000111",
    "VLE16FF_V" -> M"b???000?10000?????101?????0000111",
    "VLE256_V" -> M"b???100?00000?????101?????0000111",
    "VLE256FF_V" -> M"b???100?10000?????101?????0000111",
    "VLE32_V" -> M"b???000?00000?????110?????0000111",
    "VLE32FF_V" -> M"b???000?10000?????110?????0000111",
    "VLE512_V" -> M"b???100?00000?????110?????0000111",
    "VLE512FF_V" -> M"b???100?10000?????110?????0000111",
    "VLE64_V" -> M"b???000?00000?????111?????0000111",
    "VLE64FF_V" -> M"b???000?10000?????111?????0000111",
    "VLE8_V" -> M"b???000?00000?????000?????0000111",
    "VLE8FF_V" -> M"b???000?10000?????000?????0000111",
    "VLM_V" -> M"b000000101011?????000?????0000111",
    "VLOXEI1024_V" -> M"b???111???????????111?????0000111",
    "VLOXEI128_V" -> M"b???111???????????000?????0000111",
    "VLOXEI16_V" -> M"b???011???????????101?????0000111",
    "VLOXEI256_V" -> M"b???111???????????101?????0000111",
    "VLOXEI32_V" -> M"b???011???????????110?????0000111",
    "VLOXEI512_V" -> M"b???111???????????110?????0000111",
    "VLOXEI64_V" -> M"b???011???????????111?????0000111",
    "VLOXEI8_V" -> M"b???011???????????000?????0000111",
    "VLSE1024_V" -> M"b???110???????????111?????0000111",
    "VLSE128_V" -> M"b???110???????????000?????0000111",
    "VLSE16_V" -> M"b???010???????????101?????0000111",
    "VLSE256_V" -> M"b???110???????????101?????0000111",
    "VLSE32_V" -> M"b???010???????????110?????0000111",
    "VLSE512_V" -> M"b???110???????????110?????0000111",
    "VLSE64_V" -> M"b???010???????????111?????0000111",
    "VLSE8_V" -> M"b???010???????????000?????0000111",
    "VLUXEI1024_V" -> M"b???101???????????111?????0000111",
    "VLUXEI128_V" -> M"b???101???????????000?????0000111",
    "VLUXEI16_V" -> M"b???001???????????101?????0000111",
    "VLUXEI256_V" -> M"b???101???????????101?????0000111",
    "VLUXEI32_V" -> M"b???001???????????110?????0000111",
    "VLUXEI512_V" -> M"b???101???????????110?????0000111",
    "VLUXEI64_V" -> M"b???001???????????111?????0000111",
    "VLUXEI8_V" -> M"b???001???????????000?????0000111",
    "VMACC_VV" -> M"b101101???????????010?????1010111",
    "VMACC_VX" -> M"b101101???????????110?????1010111",
    "VMADC_VI" -> M"b0100011??????????011?????1010111",
    "VMADC_VIM" -> M"b0100010??????????011?????1010111",
    "VMADC_VV" -> M"b0100011??????????000?????1010111",
    "VMADC_VVM" -> M"b0100010??????????000?????1010111",
    "VMADC_VX" -> M"b0100011??????????100?????1010111",
    "VMADC_VXM" -> M"b0100010??????????100?????1010111",
    "VMADD_VV" -> M"b101001???????????010?????1010111",
    "VMADD_VX" -> M"b101001???????????110?????1010111",
    "VMAND_MM" -> M"b0110011??????????010?????1010111",
    "VMANDN_MM" -> M"b0110001??????????010?????1010111",
    "VMAX_VV" -> M"b000111???????????000?????1010111",
    "VMAX_VX" -> M"b000111???????????100?????1010111",
    "VMAXU_VV" -> M"b000110???????????000?????1010111",
    "VMAXU_VX" -> M"b000110???????????100?????1010111",
    "VMERGE_VIM" -> M"b0101110??????????011?????1010111",
    "VMERGE_VVM" -> M"b0101110??????????000?????1010111",
    "VMERGE_VXM" -> M"b0101110??????????100?????1010111",
    "VMFEQ_VF" -> M"b011000???????????101?????1010111",
    "VMFEQ_VV" -> M"b011000???????????001?????1010111",
    "VMFGE_VF" -> M"b011111???????????101?????1010111",
    "VMFGT_VF" -> M"b011101???????????101?????1010111",
    "VMFLE_VF" -> M"b011001???????????101?????1010111",
    "VMFLE_VV" -> M"b011001???????????001?????1010111",
    "VMFLT_VF" -> M"b011011???????????101?????1010111",
    "VMFLT_VV" -> M"b011011???????????001?????1010111",
    "VMFNE_VF" -> M"b011100???????????101?????1010111",
    "VMFNE_VV" -> M"b011100???????????001?????1010111",
    "VMIN_VV" -> M"b000101???????????000?????1010111",
    "VMIN_VX" -> M"b000101???????????100?????1010111",
    "VMINU_VV" -> M"b000100???????????000?????1010111",
    "VMINU_VX" -> M"b000100???????????100?????1010111",
    "VMNAND_MM" -> M"b0111011??????????010?????1010111",
    "VMNOR_MM" -> M"b0111101??????????010?????1010111",
    "VMOR_MM" -> M"b0110101??????????010?????1010111",
    "VMORN_MM" -> M"b0111001??????????010?????1010111",
    "VMSBC_VV" -> M"b0100111??????????000?????1010111",
    "VMSBC_VVM" -> M"b0100110??????????000?????1010111",
    "VMSBC_VX" -> M"b0100111??????????100?????1010111",
    "VMSBC_VXM" -> M"b0100110??????????100?????1010111",
    "VMSBF_M" -> M"b010100??????00001010?????1010111",
    "VMSEQ_VI" -> M"b011000???????????011?????1010111",
    "VMSEQ_VV" -> M"b011000???????????000?????1010111",
    "VMSEQ_VX" -> M"b011000???????????100?????1010111",
    "VMSGT_VI" -> M"b011111???????????011?????1010111",
    "VMSGT_VX" -> M"b011111???????????100?????1010111",
    "VMSGTU_VI" -> M"b011110???????????011?????1010111",
    "VMSGTU_VX" -> M"b011110???????????100?????1010111",
    "VMSIF_M" -> M"b010100??????00011010?????1010111",
    "VMSLE_VI" -> M"b011101???????????011?????1010111",
    "VMSLE_VV" -> M"b011101???????????000?????1010111",
    "VMSLE_VX" -> M"b011101???????????100?????1010111",
    "VMSLEU_VI" -> M"b011100???????????011?????1010111",
    "VMSLEU_VV" -> M"b011100???????????000?????1010111",
    "VMSLEU_VX" -> M"b011100???????????100?????1010111",
    "VMSLT_VV" -> M"b011011???????????000?????1010111",
    "VMSLT_VX" -> M"b011011???????????100?????1010111",
    "VMSLTU_VV" -> M"b011010???????????000?????1010111",
    "VMSLTU_VX" -> M"b011010???????????100?????1010111",
    "VMSNE_VI" -> M"b011001???????????011?????1010111",
    "VMSNE_VV" -> M"b011001???????????000?????1010111",
    "VMSNE_VX" -> M"b011001???????????100?????1010111",
    "VMSOF_M" -> M"b010100??????00010010?????1010111",
    "VMUL_VV" -> M"b100101???????????010?????1010111",
    "VMUL_VX" -> M"b100101???????????110?????1010111",
    "VMULH_VV" -> M"b100111???????????010?????1010111",
    "VMULH_VX" -> M"b100111???????????110?????1010111",
    "VMULHSU_VV" -> M"b100110???????????010?????1010111",
    "VMULHSU_VX" -> M"b100110???????????110?????1010111",
    "VMULHU_VV" -> M"b100100???????????010?????1010111",
    "VMULHU_VX" -> M"b100100???????????110?????1010111",
    "VMV1R_V" -> M"b1001111?????00000011?????1010111",
    "VMV2R_V" -> M"b1001111?????00001011?????1010111",
    "VMV4R_V" -> M"b1001111?????00011011?????1010111",
    "VMV8R_V" -> M"b1001111?????00111011?????1010111",
    "VMV_S_X" -> M"b010000100000?????110?????1010111",
    "VMV_V_I" -> M"b010111100000?????011?????1010111",
    "VMV_V_V" -> M"b010111100000?????000?????1010111",
    "VMV_V_X" -> M"b010111100000?????100?????1010111",
    "VMV_X_S" -> M"b0100001?????00000010?????1010111",
    "VMXNOR_MM" -> M"b0111111??????????010?????1010111",
    "VMXOR_MM" -> M"b0110111??????????010?????1010111",
    "VNCLIP_WI" -> M"b101111???????????011?????1010111",
    "VNCLIP_WV" -> M"b101111???????????000?????1010111",
    "VNCLIP_WX" -> M"b101111???????????100?????1010111",
    "VNCLIPU_WI" -> M"b101110???????????011?????1010111",
    "VNCLIPU_WV" -> M"b101110???????????000?????1010111",
    "VNCLIPU_WX" -> M"b101110???????????100?????1010111",
    "VNMSAC_VV" -> M"b101111???????????010?????1010111",
    "VNMSAC_VX" -> M"b101111???????????110?????1010111",
    "VNMSUB_VV" -> M"b101011???????????010?????1010111",
    "VNMSUB_VX" -> M"b101011???????????110?????1010111",
    "VNSRA_WI" -> M"b101101???????????011?????1010111",
    "VNSRA_WV" -> M"b101101???????????000?????1010111",
    "VNSRA_WX" -> M"b101101???????????100?????1010111",
    "VNSRL_WI" -> M"b101100???????????011?????1010111",
    "VNSRL_WV" -> M"b101100???????????000?????1010111",
    "VNSRL_WX" -> M"b101100???????????100?????1010111",
    "VOR_VI" -> M"b001010???????????011?????1010111",
    "VOR_VV" -> M"b001010???????????000?????1010111",
    "VOR_VX" -> M"b001010???????????100?????1010111",
    "VREDAND_VS" -> M"b000001???????????010?????1010111",
    "VREDMAX_VS" -> M"b000111???????????010?????1010111",
    "VREDMAXU_VS" -> M"b000110???????????010?????1010111",
    "VREDMIN_VS" -> M"b000101???????????010?????1010111",
    "VREDMINU_VS" -> M"b000100???????????010?????1010111",
    "VREDOR_VS" -> M"b000010???????????010?????1010111",
    "VREDSUM_VS" -> M"b000000???????????010?????1010111",
    "VREDXOR_VS" -> M"b000011???????????010?????1010111",
    "VREM_VV" -> M"b100011???????????010?????1010111",
    "VREM_VX" -> M"b100011???????????110?????1010111",
    "VREMU_VV" -> M"b100010???????????010?????1010111",
    "VREMU_VX" -> M"b100010???????????110?????1010111",
    "VRGATHER_VI" -> M"b001100???????????011?????1010111",
    "VRGATHER_VV" -> M"b001100???????????000?????1010111",
    "VRGATHER_VX" -> M"b001100???????????100?????1010111",
    "VRGATHEREI16_VV" -> M"b001110???????????000?????1010111",
    "VRSUB_VI" -> M"b000011???????????011?????1010111",
    "VRSUB_VX" -> M"b000011???????????100?????1010111",
    "VS1R_V" -> M"b000000101000?????000?????0100111",
    "VS2R_V" -> M"b001000101000?????000?????0100111",
    "VS4R_V" -> M"b011000101000?????000?????0100111",
    "VS8R_V" -> M"b111000101000?????000?????0100111",
    "VSADD_VI" -> M"b100001???????????011?????1010111",
    "VSADD_VV" -> M"b100001???????????000?????1010111",
    "VSADD_VX" -> M"b100001???????????100?????1010111",
    "VSADDU_VI" -> M"b100000???????????011?????1010111",
    "VSADDU_VV" -> M"b100000???????????000?????1010111",
    "VSADDU_VX" -> M"b100000???????????100?????1010111",
    "VSBC_VVM" -> M"b0100100??????????000?????1010111",
    "VSBC_VXM" -> M"b0100100??????????100?????1010111",
    "VSE1024_V" -> M"b???100?00000?????111?????0100111",
    "VSE128_V" -> M"b???100?00000?????000?????0100111",
    "VSE16_V" -> M"b???000?00000?????101?????0100111",
    "VSE256_V" -> M"b???100?00000?????101?????0100111",
    "VSE32_V" -> M"b???000?00000?????110?????0100111",
    "VSE512_V" -> M"b???100?00000?????110?????0100111",
    "VSE64_V" -> M"b???000?00000?????111?????0100111",
    "VSE8_V" -> M"b???000?00000?????000?????0100111",
    "VSETIVLI" -> M"b11???????????????111?????1010111",
    "VSETVL" -> M"b1000000??????????111?????1010111",
    "VSETVLI" -> M"b0????????????????111?????1010111",
    "VSEXT_VF2" -> M"b010010??????00111010?????1010111",
    "VSEXT_VF4" -> M"b010010??????00101010?????1010111",
    "VSEXT_VF8" -> M"b010010??????00011010?????1010111",
    "VSLIDE1DOWN_VX" -> M"b001111???????????110?????1010111",
    "VSLIDE1UP_VX" -> M"b001110???????????110?????1010111",
    "VSLIDEDOWN_VI" -> M"b001111???????????011?????1010111",
    "VSLIDEDOWN_VX" -> M"b001111???????????100?????1010111",
    "VSLIDEUP_VI" -> M"b001110???????????011?????1010111",
    "VSLIDEUP_VX" -> M"b001110???????????100?????1010111",
    "VSLL_VI" -> M"b100101???????????011?????1010111",
    "VSLL_VV" -> M"b100101???????????000?????1010111",
    "VSLL_VX" -> M"b100101???????????100?????1010111",
    "VSM_V" -> M"b000000101011?????000?????0100111",
    "VSMUL_VV" -> M"b100111???????????000?????1010111",
    "VSMUL_VX" -> M"b100111???????????100?????1010111",
    "VSOXEI1024_V" -> M"b???111???????????111?????0100111",
    "VSOXEI128_V" -> M"b???111???????????000?????0100111",
    "VSOXEI16_V" -> M"b???011???????????101?????0100111",
    "VSOXEI256_V" -> M"b???111???????????101?????0100111",
    "VSOXEI32_V" -> M"b???011???????????110?????0100111",
    "VSOXEI512_V" -> M"b???111???????????110?????0100111",
    "VSOXEI64_V" -> M"b???011???????????111?????0100111",
    "VSOXEI8_V" -> M"b???011???????????000?????0100111",
    "VSRA_VI" -> M"b101001???????????011?????1010111",
    "VSRA_VV" -> M"b101001???????????000?????1010111",
    "VSRA_VX" -> M"b101001???????????100?????1010111",
    "VSRL_VI" -> M"b101000???????????011?????1010111",
    "VSRL_VV" -> M"b101000???????????000?????1010111",
    "VSRL_VX" -> M"b101000???????????100?????1010111",
    "VSSE1024_V" -> M"b???110???????????111?????0100111",
    "VSSE128_V" -> M"b???110???????????000?????0100111",
    "VSSE16_V" -> M"b???010???????????101?????0100111",
    "VSSE256_V" -> M"b???110???????????101?????0100111",
    "VSSE32_V" -> M"b???010???????????110?????0100111",
    "VSSE512_V" -> M"b???110???????????110?????0100111",
    "VSSE64_V" -> M"b???010???????????111?????0100111",
    "VSSE8_V" -> M"b???010???????????000?????0100111",
    "VSSRA_VI" -> M"b101011???????????011?????1010111",
    "VSSRA_VV" -> M"b101011???????????000?????1010111",
    "VSSRA_VX" -> M"b101011???????????100?????1010111",
    "VSSRL_VI" -> M"b101010???????????011?????1010111",
    "VSSRL_VV" -> M"b101010???????????000?????1010111",
    "VSSRL_VX" -> M"b101010???????????100?????1010111",
    "VSSUB_VV" -> M"b100011???????????000?????1010111",
    "VSSUB_VX" -> M"b100011???????????100?????1010111",
    "VSSUBU_VV" -> M"b100010???????????000?????1010111",
    "VSSUBU_VX" -> M"b100010???????????100?????1010111",
    "VSUB_VV" -> M"b000010???????????000?????1010111",
    "VSUB_VX" -> M"b000010???????????100?????1010111",
    "VSUXEI1024_V" -> M"b???101???????????111?????0100111",
    "VSUXEI128_V" -> M"b???101???????????000?????0100111",
    "VSUXEI16_V" -> M"b???001???????????101?????0100111",
    "VSUXEI256_V" -> M"b???101???????????101?????0100111",
    "VSUXEI32_V" -> M"b???001???????????110?????0100111",
    "VSUXEI512_V" -> M"b???101???????????110?????0100111",
    "VSUXEI64_V" -> M"b???001???????????111?????0100111",
    "VSUXEI8_V" -> M"b???001???????????000?????0100111",
    "VWADD_VV" -> M"b110001???????????010?????1010111",
    "VWADD_VX" -> M"b110001???????????110?????1010111",
    "VWADD_WV" -> M"b110101???????????010?????1010111",
    "VWADD_WX" -> M"b110101???????????110?????1010111",
    "VWADDU_VV" -> M"b110000???????????010?????1010111",
    "VWADDU_VX" -> M"b110000???????????110?????1010111",
    "VWADDU_WV" -> M"b110100???????????010?????1010111",
    "VWADDU_WX" -> M"b110100???????????110?????1010111",
    "VWMACC_VV" -> M"b111101???????????010?????1010111",
    "VWMACC_VX" -> M"b111101???????????110?????1010111",
    "VWMACCSU_VV" -> M"b111111???????????010?????1010111",
    "VWMACCSU_VX" -> M"b111111???????????110?????1010111",
    "VWMACCU_VV" -> M"b111100???????????010?????1010111",
    "VWMACCU_VX" -> M"b111100???????????110?????1010111",
    "VWMACCUS_VX" -> M"b111110???????????110?????1010111",
    "VWMUL_VV" -> M"b111011???????????010?????1010111",
    "VWMUL_VX" -> M"b111011???????????110?????1010111",
    "VWMULSU_VV" -> M"b111010???????????010?????1010111",
    "VWMULSU_VX" -> M"b111010???????????110?????1010111",
    "VWMULU_VV" -> M"b111000???????????010?????1010111",
    "VWMULU_VX" -> M"b111000???????????110?????1010111",
    "VWREDSUM_VS" -> M"b110001???????????000?????1010111",
    "VWREDSUMU_VS" -> M"b110000???????????000?????1010111",
    "VWSUB_VV" -> M"b110011???????????010?????1010111",
    "VWSUB_VX" -> M"b110011???????????110?????1010111",
    "VWSUB_WV" -> M"b110111???????????010?????1010111",
    "VWSUB_WX" -> M"b110111???????????110?????1010111",
    "VWSUBU_VV" -> M"b110010???????????010?????1010111",
    "VWSUBU_VX" -> M"b110010???????????110?????1010111",
    "VWSUBU_WV" -> M"b110110???????????010?????1010111",
    "VWSUBU_WX" -> M"b110110???????????110?????1010111",
    "VXOR_VI" -> M"b001011???????????011?????1010111",
    "VXOR_VV" -> M"b001011???????????000?????1010111",
    "VXOR_VX" -> M"b001011???????????100?????1010111",
    "VZEXT_VF2" -> M"b010010??????00110010?????1010111",
    "VZEXT_VF4" -> M"b010010??????00100010?????1010111",
    "VZEXT_VF8" -> M"b010010??????00010010?????1010111",
  )
  val ZVKNEDType = Map(
    "VAESDF_VS" -> M"b1010011?????00001010?????1110111",
    "VAESDF_VV" -> M"b1010001?????00001010?????1110111",
    "VAESDM_VS" -> M"b1010011?????00000010?????1110111",
    "VAESDM_VV" -> M"b1010001?????00000010?????1110111",
    "VAESEF_VS" -> M"b1010011?????00011010?????1110111",
    "VAESEF_VV" -> M"b1010001?????00011010?????1110111",
    "VAESEM_VS" -> M"b1010011?????00010010?????1110111",
    "VAESEM_VV" -> M"b1010001?????00010010?????1110111",
    "VAESKF1_VI" -> M"b1000101??????????010?????1110111",
    "VAESKF2_VI" -> M"b1010101??????????010?????1110111",
    "VAESZ_VS" -> M"b1010011?????00111010?????1110111",
  )
  val ZVBBType = Map(
    "VANDN_VV" -> M"b000001???????????000?????1010111",
    "VANDN_VX" -> M"b000001???????????100?????1010111",
    "VBREV8_V" -> M"b010010??????01000010?????1010111",
    "VBREV_V" -> M"b010010??????01010010?????1010111",
    "VCLZ_V" -> M"b010010??????01100010?????1010111",
    "VCPOP_V" -> M"b010010??????01110010?????1010111",
    "VCTZ_V" -> M"b010010??????01101010?????1010111",
    "VREV8_V" -> M"b010010??????01001010?????1010111",
    "VROL_VV" -> M"b010101???????????000?????1010111",
    "VROL_VX" -> M"b010101???????????100?????1010111",
    "VROR_VI" -> M"b01010????????????011?????1010111",
    "VROR_VV" -> M"b010100???????????000?????1010111",
    "VROR_VX" -> M"b010100???????????100?????1010111",
    "VWSLL_VI" -> M"b110101???????????011?????1010111",
    "VWSLL_VV" -> M"b110101???????????000?????1010111",
    "VWSLL_VX" -> M"b110101???????????100?????1010111",
  )
  val ZVBCType = Map(
    "VCLMUL_VV" -> M"b001100???????????010?????1010111",
    "VCLMUL_VX" -> M"b001100???????????110?????1010111",
    "VCLMULH_VV" -> M"b001101???????????010?????1010111",
    "VCLMULH_VX" -> M"b001101???????????110?????1010111",
  )
  val ZVFBFMINType = Map(
    "VFNCVTBF16_F_F_W" -> M"b010010??????11101001?????1010111",
    "VFWCVTBF16_F_F_V" -> M"b010010??????01101001?????1010111",
  )
  val V_ALIASESType = Map(
    "VFREDSUM_VS" -> M"b000001???????????001?????1010111",
    "VFWREDSUM_VS" -> M"b110001???????????001?????1010111",
    "VL1R_V" -> M"b000000101000?????000?????0000111",
    "VL2R_V" -> M"b001000101000?????000?????0000111",
    "VL4R_V" -> M"b011000101000?????000?????0000111",
    "VL8R_V" -> M"b111000101000?????000?????0000111",
    "VLE1_V" -> M"b000000101011?????000?????0000111",
    "VMANDNOT_MM" -> M"b011000???????????010?????1010111",
    "VMORNOT_MM" -> M"b011100???????????010?????1010111",
    "VPOPC_M" -> M"b010000??????10000010?????1010111",
    "VSE1_V" -> M"b000000101011?????000?????0100111",
  )
  val ZVFBFWMAType = Map(
    "VFWMACCBF16_VF" -> M"b111011???????????101?????1010111",
    "VFWMACCBF16_VV" -> M"b111011???????????001?????1010111",
  )
  val ZVKGType = Map(
    "VGHSH_VV" -> M"b1011001??????????010?????1110111",
    "VGMUL_VV" -> M"b1010001?????10001010?????1110111",
  )
  val ZVKNHAType = Map(
    "VSHA2CH_VV" -> M"b1011101??????????010?????1110111",
    "VSHA2CL_VV" -> M"b1011111??????????010?????1110111",
    "VSHA2MS_VV" -> M"b1011011??????????010?????1110111",
  )
  val ZVKSHType = Map(
    "VSM3C_VI" -> M"b1010111??????????010?????1110111",
    "VSM3ME_VV" -> M"b1000001??????????010?????1110111",
  )
  val ZVKSEDType = Map(
    "VSM4K_VI" -> M"b1000011??????????010?????1110111",
    "VSM4R_VS" -> M"b1010011?????10000010?????1110111",
    "VSM4R_VV" -> M"b1010001?????10000010?????1110111",
  )
  val ZAWRSType = Map(
    "WRS_NTO" -> M"b00000000110100000000000001110011",
    "WRS_STO" -> M"b00000001110100000000000001110011",
  )
  val ZBB32Type = Map(
    "ZEXT_H_RV32" -> M"b000010000000?????100?????0110011",
  )

}

object Causes {
  val misaligned_fetch = 0x0
  val fetch_access = 0x1
  val illegal_instruction = 0x2
  val breakpoint = 0x3
  val misaligned_load = 0x4
  val load_access = 0x5
  val misaligned_store = 0x6
  val store_access = 0x7
  val user_ecall = 0x8
  val supervisor_ecall = 0x9
  val virtual_supervisor_ecall = 0xa
  val machine_ecall = 0xb
  val fetch_page_fault = 0xc
  val load_page_fault = 0xd
  val store_page_fault = 0xf
  val software_check_fault = 0x12
  val hardware_error_fault = 0x13
  val fetch_guest_page_fault = 0x14
  val load_guest_page_fault = 0x15
  val virtual_instruction = 0x16
  val store_guest_page_fault = 0x17
  val all = {
    val res = collection.mutable.ArrayBuffer[Int]()
    res += misaligned_fetch
    res += fetch_access
    res += illegal_instruction
    res += breakpoint
    res += misaligned_load
    res += load_access
    res += misaligned_store
    res += store_access
    res += user_ecall
    res += supervisor_ecall
    res += virtual_supervisor_ecall
    res += machine_ecall
    res += fetch_page_fault
    res += load_page_fault
    res += store_page_fault
    res += software_check_fault
    res += hardware_error_fault
    res += fetch_guest_page_fault
    res += load_guest_page_fault
    res += virtual_instruction
    res += store_guest_page_fault
    res.toArray
  }
}

object CSRs {
  val fflags = 0x1
  val frm = 0x2
  val fcsr = 0x3
  val vstart = 0x8
  val vxsat = 0x9
  val vxrm = 0xa
  val vcsr = 0xf
  val ssp = 0x11
  val seed = 0x15
  val jvt = 0x17
  val cycle = 0xc00
  val time = 0xc01
  val instret = 0xc02
  val hpmcounter3 = 0xc03
  val hpmcounter4 = 0xc04
  val hpmcounter5 = 0xc05
  val hpmcounter6 = 0xc06
  val hpmcounter7 = 0xc07
  val hpmcounter8 = 0xc08
  val hpmcounter9 = 0xc09
  val hpmcounter10 = 0xc0a
  val hpmcounter11 = 0xc0b
  val hpmcounter12 = 0xc0c
  val hpmcounter13 = 0xc0d
  val hpmcounter14 = 0xc0e
  val hpmcounter15 = 0xc0f
  val hpmcounter16 = 0xc10
  val hpmcounter17 = 0xc11
  val hpmcounter18 = 0xc12
  val hpmcounter19 = 0xc13
  val hpmcounter20 = 0xc14
  val hpmcounter21 = 0xc15
  val hpmcounter22 = 0xc16
  val hpmcounter23 = 0xc17
  val hpmcounter24 = 0xc18
  val hpmcounter25 = 0xc19
  val hpmcounter26 = 0xc1a
  val hpmcounter27 = 0xc1b
  val hpmcounter28 = 0xc1c
  val hpmcounter29 = 0xc1d
  val hpmcounter30 = 0xc1e
  val hpmcounter31 = 0xc1f
  val vl = 0xc20
  val vtype = 0xc21
  val vlenb = 0xc22
  val sstatus = 0x100
  val sedeleg = 0x102
  val sideleg = 0x103
  val sie = 0x104
  val stvec = 0x105
  val scounteren = 0x106
  val senvcfg = 0x10a
  val sstateen0 = 0x10c
  val sstateen1 = 0x10d
  val sstateen2 = 0x10e
  val sstateen3 = 0x10f
  val scountinhibit = 0x120
  val sscratch = 0x140
  val sepc = 0x141
  val scause = 0x142
  val stval = 0x143
  val sip = 0x144
  val stimecmp = 0x14d
  val siselect = 0x150
  val sireg = 0x151
  val sireg2 = 0x152
  val sireg3 = 0x153
  val sireg4 = 0x155
  val sireg5 = 0x156
  val sireg6 = 0x157
  val stopei = 0x15c
  val satp = 0x180
  val srmcfg = 0x181
  val scontext = 0x5a8
  val vsstatus = 0x200
  val vsie = 0x204
  val vstvec = 0x205
  val vsscratch = 0x240
  val vsepc = 0x241
  val vscause = 0x242
  val vstval = 0x243
  val vsip = 0x244
  val vstimecmp = 0x24d
  val vsiselect = 0x250
  val vsireg = 0x251
  val vsireg2 = 0x252
  val vsireg3 = 0x253
  val vsireg4 = 0x255
  val vsireg5 = 0x256
  val vsireg6 = 0x257
  val vstopei = 0x25c
  val vsatp = 0x280
  val hstatus = 0x600
  val hedeleg = 0x602
  val hideleg = 0x603
  val hie = 0x604
  val htimedelta = 0x605
  val hcounteren = 0x606
  val hgeie = 0x607
  val hvien = 0x608
  val hvictl = 0x609
  val henvcfg = 0x60a
  val hstateen0 = 0x60c
  val hstateen1 = 0x60d
  val hstateen2 = 0x60e
  val hstateen3 = 0x60f
  val htval = 0x643
  val hip = 0x644
  val hvip = 0x645
  val hviprio1 = 0x646
  val hviprio2 = 0x647
  val htinst = 0x64a
  val hgatp = 0x680
  val hcontext = 0x6a8
  val hgeip = 0xe12
  val vstopi = 0xeb0
  val scountovf = 0xda0
  val stopi = 0xdb0
  val utvt = 0x7
  val unxti = 0x45
  val uintstatus = 0x46
  val uscratchcsw = 0x48
  val uscratchcswl = 0x49
  val stvt = 0x107
  val snxti = 0x145
  val sintstatus = 0x146
  val sscratchcsw = 0x148
  val sscratchcswl = 0x149
  val mtvt = 0x307
  val mnxti = 0x345
  val mintstatus = 0x346
  val mscratchcsw = 0x348
  val mscratchcswl = 0x349
  val mstatus = 0x300
  val misa = 0x301
  val medeleg = 0x302
  val mideleg = 0x303
  val mie = 0x304
  val mtvec = 0x305
  val mcounteren = 0x306
  val mvien = 0x308
  val mvip = 0x309
  val menvcfg = 0x30a
  val mstateen0 = 0x30c
  val mstateen1 = 0x30d
  val mstateen2 = 0x30e
  val mstateen3 = 0x30f
  val mcountinhibit = 0x320
  val mscratch = 0x340
  val mepc = 0x341
  val mcause = 0x342
  val mtval = 0x343
  val mip = 0x344
  val mtinst = 0x34a
  val mtval2 = 0x34b
  val miselect = 0x350
  val mireg = 0x351
  val mireg2 = 0x352
  val mireg3 = 0x353
  val mireg4 = 0x355
  val mireg5 = 0x356
  val mireg6 = 0x357
  val mtopei = 0x35c
  val pmpcfg0 = 0x3a0
  val pmpcfg1 = 0x3a1
  val pmpcfg2 = 0x3a2
  val pmpcfg3 = 0x3a3
  val pmpcfg4 = 0x3a4
  val pmpcfg5 = 0x3a5
  val pmpcfg6 = 0x3a6
  val pmpcfg7 = 0x3a7
  val pmpcfg8 = 0x3a8
  val pmpcfg9 = 0x3a9
  val pmpcfg10 = 0x3aa
  val pmpcfg11 = 0x3ab
  val pmpcfg12 = 0x3ac
  val pmpcfg13 = 0x3ad
  val pmpcfg14 = 0x3ae
  val pmpcfg15 = 0x3af
  val pmpaddr0 = 0x3b0
  val pmpaddr1 = 0x3b1
  val pmpaddr2 = 0x3b2
  val pmpaddr3 = 0x3b3
  val pmpaddr4 = 0x3b4
  val pmpaddr5 = 0x3b5
  val pmpaddr6 = 0x3b6
  val pmpaddr7 = 0x3b7
  val pmpaddr8 = 0x3b8
  val pmpaddr9 = 0x3b9
  val pmpaddr10 = 0x3ba
  val pmpaddr11 = 0x3bb
  val pmpaddr12 = 0x3bc
  val pmpaddr13 = 0x3bd
  val pmpaddr14 = 0x3be
  val pmpaddr15 = 0x3bf
  val pmpaddr16 = 0x3c0
  val pmpaddr17 = 0x3c1
  val pmpaddr18 = 0x3c2
  val pmpaddr19 = 0x3c3
  val pmpaddr20 = 0x3c4
  val pmpaddr21 = 0x3c5
  val pmpaddr22 = 0x3c6
  val pmpaddr23 = 0x3c7
  val pmpaddr24 = 0x3c8
  val pmpaddr25 = 0x3c9
  val pmpaddr26 = 0x3ca
  val pmpaddr27 = 0x3cb
  val pmpaddr28 = 0x3cc
  val pmpaddr29 = 0x3cd
  val pmpaddr30 = 0x3ce
  val pmpaddr31 = 0x3cf
  val pmpaddr32 = 0x3d0
  val pmpaddr33 = 0x3d1
  val pmpaddr34 = 0x3d2
  val pmpaddr35 = 0x3d3
  val pmpaddr36 = 0x3d4
  val pmpaddr37 = 0x3d5
  val pmpaddr38 = 0x3d6
  val pmpaddr39 = 0x3d7
  val pmpaddr40 = 0x3d8
  val pmpaddr41 = 0x3d9
  val pmpaddr42 = 0x3da
  val pmpaddr43 = 0x3db
  val pmpaddr44 = 0x3dc
  val pmpaddr45 = 0x3dd
  val pmpaddr46 = 0x3de
  val pmpaddr47 = 0x3df
  val pmpaddr48 = 0x3e0
  val pmpaddr49 = 0x3e1
  val pmpaddr50 = 0x3e2
  val pmpaddr51 = 0x3e3
  val pmpaddr52 = 0x3e4
  val pmpaddr53 = 0x3e5
  val pmpaddr54 = 0x3e6
  val pmpaddr55 = 0x3e7
  val pmpaddr56 = 0x3e8
  val pmpaddr57 = 0x3e9
  val pmpaddr58 = 0x3ea
  val pmpaddr59 = 0x3eb
  val pmpaddr60 = 0x3ec
  val pmpaddr61 = 0x3ed
  val pmpaddr62 = 0x3ee
  val pmpaddr63 = 0x3ef
  val mseccfg = 0x747
  val tselect = 0x7a0
  val tdata1 = 0x7a1
  val tdata2 = 0x7a2
  val tdata3 = 0x7a3
  val tinfo = 0x7a4
  val tcontrol = 0x7a5
  val mcontext = 0x7a8
  val mscontext = 0x7aa
  val dcsr = 0x7b0
  val dpc = 0x7b1
  val dscratch0 = 0x7b2
  val dscratch1 = 0x7b3
  val mcycle = 0xb00
  val minstret = 0xb02
  val mhpmcounter3 = 0xb03
  val mhpmcounter4 = 0xb04
  val mhpmcounter5 = 0xb05
  val mhpmcounter6 = 0xb06
  val mhpmcounter7 = 0xb07
  val mhpmcounter8 = 0xb08
  val mhpmcounter9 = 0xb09
  val mhpmcounter10 = 0xb0a
  val mhpmcounter11 = 0xb0b
  val mhpmcounter12 = 0xb0c
  val mhpmcounter13 = 0xb0d
  val mhpmcounter14 = 0xb0e
  val mhpmcounter15 = 0xb0f
  val mhpmcounter16 = 0xb10
  val mhpmcounter17 = 0xb11
  val mhpmcounter18 = 0xb12
  val mhpmcounter19 = 0xb13
  val mhpmcounter20 = 0xb14
  val mhpmcounter21 = 0xb15
  val mhpmcounter22 = 0xb16
  val mhpmcounter23 = 0xb17
  val mhpmcounter24 = 0xb18
  val mhpmcounter25 = 0xb19
  val mhpmcounter26 = 0xb1a
  val mhpmcounter27 = 0xb1b
  val mhpmcounter28 = 0xb1c
  val mhpmcounter29 = 0xb1d
  val mhpmcounter30 = 0xb1e
  val mhpmcounter31 = 0xb1f
  val mcyclecfg = 0x321
  val minstretcfg = 0x322
  val mhpmevent3 = 0x323
  val mhpmevent4 = 0x324
  val mhpmevent5 = 0x325
  val mhpmevent6 = 0x326
  val mhpmevent7 = 0x327
  val mhpmevent8 = 0x328
  val mhpmevent9 = 0x329
  val mhpmevent10 = 0x32a
  val mhpmevent11 = 0x32b
  val mhpmevent12 = 0x32c
  val mhpmevent13 = 0x32d
  val mhpmevent14 = 0x32e
  val mhpmevent15 = 0x32f
  val mhpmevent16 = 0x330
  val mhpmevent17 = 0x331
  val mhpmevent18 = 0x332
  val mhpmevent19 = 0x333
  val mhpmevent20 = 0x334
  val mhpmevent21 = 0x335
  val mhpmevent22 = 0x336
  val mhpmevent23 = 0x337
  val mhpmevent24 = 0x338
  val mhpmevent25 = 0x339
  val mhpmevent26 = 0x33a
  val mhpmevent27 = 0x33b
  val mhpmevent28 = 0x33c
  val mhpmevent29 = 0x33d
  val mhpmevent30 = 0x33e
  val mhpmevent31 = 0x33f
  val mvendorid = 0xf11
  val marchid = 0xf12
  val mimpid = 0xf13
  val mhartid = 0xf14
  val mconfigptr = 0xf15
  val mtopi = 0xfb0
  val sieh = 0x114
  val siph = 0x154
  val stimecmph = 0x15d
  val vsieh = 0x214
  val vsiph = 0x254
  val vstimecmph = 0x25d
  val htimedeltah = 0x615
  val hidelegh = 0x613
  val hvienh = 0x618
  val henvcfgh = 0x61a
  val hviph = 0x655
  val hviprio1h = 0x656
  val hviprio2h = 0x657
  val hstateen0h = 0x61c
  val hstateen1h = 0x61d
  val hstateen2h = 0x61e
  val hstateen3h = 0x61f
  val cycleh = 0xc80
  val timeh = 0xc81
  val instreth = 0xc82
  val hpmcounter3h = 0xc83
  val hpmcounter4h = 0xc84
  val hpmcounter5h = 0xc85
  val hpmcounter6h = 0xc86
  val hpmcounter7h = 0xc87
  val hpmcounter8h = 0xc88
  val hpmcounter9h = 0xc89
  val hpmcounter10h = 0xc8a
  val hpmcounter11h = 0xc8b
  val hpmcounter12h = 0xc8c
  val hpmcounter13h = 0xc8d
  val hpmcounter14h = 0xc8e
  val hpmcounter15h = 0xc8f
  val hpmcounter16h = 0xc90
  val hpmcounter17h = 0xc91
  val hpmcounter18h = 0xc92
  val hpmcounter19h = 0xc93
  val hpmcounter20h = 0xc94
  val hpmcounter21h = 0xc95
  val hpmcounter22h = 0xc96
  val hpmcounter23h = 0xc97
  val hpmcounter24h = 0xc98
  val hpmcounter25h = 0xc99
  val hpmcounter26h = 0xc9a
  val hpmcounter27h = 0xc9b
  val hpmcounter28h = 0xc9c
  val hpmcounter29h = 0xc9d
  val hpmcounter30h = 0xc9e
  val hpmcounter31h = 0xc9f
  val mstatush = 0x310
  val midelegh = 0x313
  val mieh = 0x314
  val mvienh = 0x318
  val mviph = 0x319
  val menvcfgh = 0x31a
  val mstateen0h = 0x31c
  val mstateen1h = 0x31d
  val mstateen2h = 0x31e
  val mstateen3h = 0x31f
  val miph = 0x354
  val mcyclecfgh = 0x721
  val minstretcfgh = 0x722
  val mhpmevent3h = 0x723
  val mhpmevent4h = 0x724
  val mhpmevent5h = 0x725
  val mhpmevent6h = 0x726
  val mhpmevent7h = 0x727
  val mhpmevent8h = 0x728
  val mhpmevent9h = 0x729
  val mhpmevent10h = 0x72a
  val mhpmevent11h = 0x72b
  val mhpmevent12h = 0x72c
  val mhpmevent13h = 0x72d
  val mhpmevent14h = 0x72e
  val mhpmevent15h = 0x72f
  val mhpmevent16h = 0x730
  val mhpmevent17h = 0x731
  val mhpmevent18h = 0x732
  val mhpmevent19h = 0x733
  val mhpmevent20h = 0x734
  val mhpmevent21h = 0x735
  val mhpmevent22h = 0x736
  val mhpmevent23h = 0x737
  val mhpmevent24h = 0x738
  val mhpmevent25h = 0x739
  val mhpmevent26h = 0x73a
  val mhpmevent27h = 0x73b
  val mhpmevent28h = 0x73c
  val mhpmevent29h = 0x73d
  val mhpmevent30h = 0x73e
  val mhpmevent31h = 0x73f
  val mnscratch = 0x740
  val mnepc = 0x741
  val mncause = 0x742
  val mnstatus = 0x744
  val mseccfgh = 0x757
  val mcycleh = 0xb80
  val minstreth = 0xb82
  val mhpmcounter3h = 0xb83
  val mhpmcounter4h = 0xb84
  val mhpmcounter5h = 0xb85
  val mhpmcounter6h = 0xb86
  val mhpmcounter7h = 0xb87
  val mhpmcounter8h = 0xb88
  val mhpmcounter9h = 0xb89
  val mhpmcounter10h = 0xb8a
  val mhpmcounter11h = 0xb8b
  val mhpmcounter12h = 0xb8c
  val mhpmcounter13h = 0xb8d
  val mhpmcounter14h = 0xb8e
  val mhpmcounter15h = 0xb8f
  val mhpmcounter16h = 0xb90
  val mhpmcounter17h = 0xb91
  val mhpmcounter18h = 0xb92
  val mhpmcounter19h = 0xb93
  val mhpmcounter20h = 0xb94
  val mhpmcounter21h = 0xb95
  val mhpmcounter22h = 0xb96
  val mhpmcounter23h = 0xb97
  val mhpmcounter24h = 0xb98
  val mhpmcounter25h = 0xb99
  val mhpmcounter26h = 0xb9a
  val mhpmcounter27h = 0xb9b
  val mhpmcounter28h = 0xb9c
  val mhpmcounter29h = 0xb9d
  val mhpmcounter30h = 0xb9e
  val mhpmcounter31h = 0xb9f
  val all = {
    val res = collection.mutable.ArrayBuffer[Int]()
    res += fflags
    res += frm
    res += fcsr
    res += vstart
    res += vxsat
    res += vxrm
    res += vcsr
    res += ssp
    res += seed
    res += jvt
    res += cycle
    res += time
    res += instret
    res += hpmcounter3
    res += hpmcounter4
    res += hpmcounter5
    res += hpmcounter6
    res += hpmcounter7
    res += hpmcounter8
    res += hpmcounter9
    res += hpmcounter10
    res += hpmcounter11
    res += hpmcounter12
    res += hpmcounter13
    res += hpmcounter14
    res += hpmcounter15
    res += hpmcounter16
    res += hpmcounter17
    res += hpmcounter18
    res += hpmcounter19
    res += hpmcounter20
    res += hpmcounter21
    res += hpmcounter22
    res += hpmcounter23
    res += hpmcounter24
    res += hpmcounter25
    res += hpmcounter26
    res += hpmcounter27
    res += hpmcounter28
    res += hpmcounter29
    res += hpmcounter30
    res += hpmcounter31
    res += vl
    res += vtype
    res += vlenb
    res += sstatus
    res += sedeleg
    res += sideleg
    res += sie
    res += stvec
    res += scounteren
    res += senvcfg
    res += sstateen0
    res += sstateen1
    res += sstateen2
    res += sstateen3
    res += scountinhibit
    res += sscratch
    res += sepc
    res += scause
    res += stval
    res += sip
    res += stimecmp
    res += siselect
    res += sireg
    res += sireg2
    res += sireg3
    res += sireg4
    res += sireg5
    res += sireg6
    res += stopei
    res += satp
    res += srmcfg
    res += scontext
    res += vsstatus
    res += vsie
    res += vstvec
    res += vsscratch
    res += vsepc
    res += vscause
    res += vstval
    res += vsip
    res += vstimecmp
    res += vsiselect
    res += vsireg
    res += vsireg2
    res += vsireg3
    res += vsireg4
    res += vsireg5
    res += vsireg6
    res += vstopei
    res += vsatp
    res += hstatus
    res += hedeleg
    res += hideleg
    res += hie
    res += htimedelta
    res += hcounteren
    res += hgeie
    res += hvien
    res += hvictl
    res += henvcfg
    res += hstateen0
    res += hstateen1
    res += hstateen2
    res += hstateen3
    res += htval
    res += hip
    res += hvip
    res += hviprio1
    res += hviprio2
    res += htinst
    res += hgatp
    res += hcontext
    res += hgeip
    res += vstopi
    res += scountovf
    res += stopi
    res += utvt
    res += unxti
    res += uintstatus
    res += uscratchcsw
    res += uscratchcswl
    res += stvt
    res += snxti
    res += sintstatus
    res += sscratchcsw
    res += sscratchcswl
    res += mtvt
    res += mnxti
    res += mintstatus
    res += mscratchcsw
    res += mscratchcswl
    res += mstatus
    res += misa
    res += medeleg
    res += mideleg
    res += mie
    res += mtvec
    res += mcounteren
    res += mvien
    res += mvip
    res += menvcfg
    res += mstateen0
    res += mstateen1
    res += mstateen2
    res += mstateen3
    res += mcountinhibit
    res += mscratch
    res += mepc
    res += mcause
    res += mtval
    res += mip
    res += mtinst
    res += mtval2
    res += miselect
    res += mireg
    res += mireg2
    res += mireg3
    res += mireg4
    res += mireg5
    res += mireg6
    res += mtopei
    res += pmpcfg0
    res += pmpcfg1
    res += pmpcfg2
    res += pmpcfg3
    res += pmpcfg4
    res += pmpcfg5
    res += pmpcfg6
    res += pmpcfg7
    res += pmpcfg8
    res += pmpcfg9
    res += pmpcfg10
    res += pmpcfg11
    res += pmpcfg12
    res += pmpcfg13
    res += pmpcfg14
    res += pmpcfg15
    res += pmpaddr0
    res += pmpaddr1
    res += pmpaddr2
    res += pmpaddr3
    res += pmpaddr4
    res += pmpaddr5
    res += pmpaddr6
    res += pmpaddr7
    res += pmpaddr8
    res += pmpaddr9
    res += pmpaddr10
    res += pmpaddr11
    res += pmpaddr12
    res += pmpaddr13
    res += pmpaddr14
    res += pmpaddr15
    res += pmpaddr16
    res += pmpaddr17
    res += pmpaddr18
    res += pmpaddr19
    res += pmpaddr20
    res += pmpaddr21
    res += pmpaddr22
    res += pmpaddr23
    res += pmpaddr24
    res += pmpaddr25
    res += pmpaddr26
    res += pmpaddr27
    res += pmpaddr28
    res += pmpaddr29
    res += pmpaddr30
    res += pmpaddr31
    res += pmpaddr32
    res += pmpaddr33
    res += pmpaddr34
    res += pmpaddr35
    res += pmpaddr36
    res += pmpaddr37
    res += pmpaddr38
    res += pmpaddr39
    res += pmpaddr40
    res += pmpaddr41
    res += pmpaddr42
    res += pmpaddr43
    res += pmpaddr44
    res += pmpaddr45
    res += pmpaddr46
    res += pmpaddr47
    res += pmpaddr48
    res += pmpaddr49
    res += pmpaddr50
    res += pmpaddr51
    res += pmpaddr52
    res += pmpaddr53
    res += pmpaddr54
    res += pmpaddr55
    res += pmpaddr56
    res += pmpaddr57
    res += pmpaddr58
    res += pmpaddr59
    res += pmpaddr60
    res += pmpaddr61
    res += pmpaddr62
    res += pmpaddr63
    res += mseccfg
    res += tselect
    res += tdata1
    res += tdata2
    res += tdata3
    res += tinfo
    res += tcontrol
    res += mcontext
    res += mscontext
    res += dcsr
    res += dpc
    res += dscratch0
    res += dscratch1
    res += mcycle
    res += minstret
    res += mhpmcounter3
    res += mhpmcounter4
    res += mhpmcounter5
    res += mhpmcounter6
    res += mhpmcounter7
    res += mhpmcounter8
    res += mhpmcounter9
    res += mhpmcounter10
    res += mhpmcounter11
    res += mhpmcounter12
    res += mhpmcounter13
    res += mhpmcounter14
    res += mhpmcounter15
    res += mhpmcounter16
    res += mhpmcounter17
    res += mhpmcounter18
    res += mhpmcounter19
    res += mhpmcounter20
    res += mhpmcounter21
    res += mhpmcounter22
    res += mhpmcounter23
    res += mhpmcounter24
    res += mhpmcounter25
    res += mhpmcounter26
    res += mhpmcounter27
    res += mhpmcounter28
    res += mhpmcounter29
    res += mhpmcounter30
    res += mhpmcounter31
    res += mcyclecfg
    res += minstretcfg
    res += mhpmevent3
    res += mhpmevent4
    res += mhpmevent5
    res += mhpmevent6
    res += mhpmevent7
    res += mhpmevent8
    res += mhpmevent9
    res += mhpmevent10
    res += mhpmevent11
    res += mhpmevent12
    res += mhpmevent13
    res += mhpmevent14
    res += mhpmevent15
    res += mhpmevent16
    res += mhpmevent17
    res += mhpmevent18
    res += mhpmevent19
    res += mhpmevent20
    res += mhpmevent21
    res += mhpmevent22
    res += mhpmevent23
    res += mhpmevent24
    res += mhpmevent25
    res += mhpmevent26
    res += mhpmevent27
    res += mhpmevent28
    res += mhpmevent29
    res += mhpmevent30
    res += mhpmevent31
    res += mvendorid
    res += marchid
    res += mimpid
    res += mhartid
    res += mconfigptr
    res += mtopi
    res.toArray
  }
  val all32 = {
    val res = collection.mutable.ArrayBuffer(all: _*)
    res += sieh
    res += siph
    res += stimecmph
    res += vsieh
    res += vsiph
    res += vstimecmph
    res += htimedeltah
    res += hidelegh
    res += hvienh
    res += henvcfgh
    res += hviph
    res += hviprio1h
    res += hviprio2h
    res += hstateen0h
    res += hstateen1h
    res += hstateen2h
    res += hstateen3h
    res += cycleh
    res += timeh
    res += instreth
    res += hpmcounter3h
    res += hpmcounter4h
    res += hpmcounter5h
    res += hpmcounter6h
    res += hpmcounter7h
    res += hpmcounter8h
    res += hpmcounter9h
    res += hpmcounter10h
    res += hpmcounter11h
    res += hpmcounter12h
    res += hpmcounter13h
    res += hpmcounter14h
    res += hpmcounter15h
    res += hpmcounter16h
    res += hpmcounter17h
    res += hpmcounter18h
    res += hpmcounter19h
    res += hpmcounter20h
    res += hpmcounter21h
    res += hpmcounter22h
    res += hpmcounter23h
    res += hpmcounter24h
    res += hpmcounter25h
    res += hpmcounter26h
    res += hpmcounter27h
    res += hpmcounter28h
    res += hpmcounter29h
    res += hpmcounter30h
    res += hpmcounter31h
    res += mstatush
    res += midelegh
    res += mieh
    res += mvienh
    res += mviph
    res += menvcfgh
    res += mstateen0h
    res += mstateen1h
    res += mstateen2h
    res += mstateen3h
    res += miph
    res += mcyclecfgh
    res += minstretcfgh
    res += mhpmevent3h
    res += mhpmevent4h
    res += mhpmevent5h
    res += mhpmevent6h
    res += mhpmevent7h
    res += mhpmevent8h
    res += mhpmevent9h
    res += mhpmevent10h
    res += mhpmevent11h
    res += mhpmevent12h
    res += mhpmevent13h
    res += mhpmevent14h
    res += mhpmevent15h
    res += mhpmevent16h
    res += mhpmevent17h
    res += mhpmevent18h
    res += mhpmevent19h
    res += mhpmevent20h
    res += mhpmevent21h
    res += mhpmevent22h
    res += mhpmevent23h
    res += mhpmevent24h
    res += mhpmevent25h
    res += mhpmevent26h
    res += mhpmevent27h
    res += mhpmevent28h
    res += mhpmevent29h
    res += mhpmevent30h
    res += mhpmevent31h
    res += mnscratch
    res += mnepc
    res += mncause
    res += mnstatus
    res += mseccfgh
    res += mcycleh
    res += minstreth
    res += mhpmcounter3h
    res += mhpmcounter4h
    res += mhpmcounter5h
    res += mhpmcounter6h
    res += mhpmcounter7h
    res += mhpmcounter8h
    res += mhpmcounter9h
    res += mhpmcounter10h
    res += mhpmcounter11h
    res += mhpmcounter12h
    res += mhpmcounter13h
    res += mhpmcounter14h
    res += mhpmcounter15h
    res += mhpmcounter16h
    res += mhpmcounter17h
    res += mhpmcounter18h
    res += mhpmcounter19h
    res += mhpmcounter20h
    res += mhpmcounter21h
    res += mhpmcounter22h
    res += mhpmcounter23h
    res += mhpmcounter24h
    res += mhpmcounter25h
    res += mhpmcounter26h
    res += mhpmcounter27h
    res += mhpmcounter28h
    res += mhpmcounter29h
    res += mhpmcounter30h
    res += mhpmcounter31h
    res.toArray
  }
}
